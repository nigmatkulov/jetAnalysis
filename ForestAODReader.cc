/**
 * @file ForestAODReader.cc
 * @author Grigory Nigmatkulov (gnigmat@uic.edu)
 * @brief CMS ForestAOD reader
 * @version 0.1
 * @date 2023-10-19
 * 
 * @copyright Copyright (c) 2023
 * 
 */

// Jet analysis headers
#include "ForestAODReader.h"

// ROOT headers
#include "TFile.h"

// C++ headers
#include <cstddef>
#include <cstring>
#include <fstream>

//_________________
ForestAODReader::ForestAODReader() : fEvent{nullptr}, fInFileName{nullptr}, fEvents2Read{0}, fEventsProcessed{0},
    fIsMc{false}, fCorrectCentMC{false}, fUseHltBranch{kTRUE}, fUseSkimmingBranch{kTRUE}, 
    fUseRecoJetBranch{kTRUE}, 
    fUseTrackBranch{false}, fUseGenTrackBranch{false},
    fHltTree{nullptr}, fSkimTree{nullptr}, fEventTree{nullptr},
    fRecoJetTree{nullptr}, fTrkTree{nullptr}, fGenTrkTree{nullptr},
    fRecoJetTreeName{"akCs4PFJetAnalyzer"},
    fJEC{nullptr}, fJECFiles{}, fJECPath{}, fJEU{nullptr}, fJEUInputFileName{},
    fCollidingSystem{Form("PbPb")}, fCollidingEnergyGeV{5020},
    fYearOfDataTaking{2018}, fDoJetPtSmearing{false}, 
    fFixJetArrays{false}, fEventCut{nullptr}, fJetCut{nullptr},
    fRecoJet2GenJetId{}, fGenJet2RecoJet{}, 
    fUseExtraJECforAk4Cs{false}, fJECScaleCorr{nullptr}, fUseJEU{0},
    fUseJERSystematics{0}, fAlphaJER{0.0415552}, fBetaJER{0.960013},
    fJERSmearFunc{nullptr}, fRndm{nullptr},
    fVerbose{false} {
    if ( fVerbose ) {
        std::cout << "ForestAODReader::ForestAODReader()" << std::endl;
    }
    // Initialize many variables
    fRndm = new TRandom3(0);
    clearVariables();
    setJERSystParams();
}

//_________________
ForestAODReader::ForestAODReader(const char* inputStream,  
                                 const bool& useHltBranch, const bool& useSkimmingBranch, 
                                 const bool& useRecoJetBranch, 
                                 const bool& useTrackBranch, const bool& useGenTrackBranch, 
                                 const bool& isMc) : 
    fEvent{nullptr}, fInFileName{inputStream}, fEvents2Read{0}, 
    fEventsProcessed{0}, fIsMc{isMc}, fCorrectCentMC{false}, 
    fUseManualJEC{false}, fIsPbGoing{true},
    fUseHltBranch{useHltBranch}, fUseSkimmingBranch{useSkimmingBranch}, 
    fUseRecoJetBranch{useRecoJetBranch}, 
    fUseTrackBranch{useTrackBranch}, fUseGenTrackBranch{useGenTrackBranch},
    fRecoJetTreeName{"akCs4PFJetAnalyzer"},
    fJEC{nullptr}, fJECFiles{}, fJECPath{}, fJEU{nullptr}, fJEUInputFileName{},
    fCollidingSystem{Form("PbPb")}, fCollidingEnergyGeV{5020},
    fYearOfDataTaking{2018}, fDoJetPtSmearing{false}, 
    fFixJetArrays{false}, fEventCut{nullptr}, fJetCut{nullptr},
    fJECScaleCorr{nullptr}, fUseJEU{0}, fUseJERSystematics{0}, 
    fAlphaJER{0.0415552}, fBetaJER{0.960013}, fJERSmearFunc{nullptr}, 
    fVerbose{false} {
    // Initialize many variables
    fRndm = new TRandom3(0);
    clearVariables();

    if ( fVerbose ) {
        std::cout << "ForestAODReader::ForestAODReader()" << std::endl;
    }
    setJERSystParams();
}

//_________________
ForestAODReader::~ForestAODReader() {
    if ( fVerbose ) {
        std::cout << "ForestAODReader::~ForestAODReader()";
    }
    if (fEvent) delete fEvent;
    if (fHltTree) delete fHltTree;
    if (fSkimTree) delete fSkimTree;
    if (fEventTree) delete fEventTree;
    if (fRecoJetTree) delete fRecoJetTree;
    if (fTrkTree) delete fTrkTree;
    if (fGenTrkTree) delete fGenTrkTree;
    if (fJEC) delete fJEC;
    if (fJEU) delete fJEU;
    if (fEventCut) delete fEventCut;
    if (fJetCut) delete fJetCut;
    if (fJECScaleCorr) delete fJECScaleCorr;
    if (fJERSmearFunc) delete fJERSmearFunc;
}

//________________
void ForestAODReader::setJERSystParams() {
    if ( fVerbose ) {
        std::cout << "ForestAODReader::setJERSystParams";
    }
    fJerEtaLow.clear(); fJerEtaHi.clear(); fJerDef.clear(); fJerLow.clear(); fJerHi.clear();
    fJerEtaLow.push_back(-5.191); fJerEtaHi.push_back(-3.139); fJerDef.push_back(1.1922); fJerLow.push_back(1.0434); fJerHi.push_back(1.341);
    fJerEtaLow.push_back(-3.139); fJerEtaHi.push_back(-2.964); fJerDef.push_back(1.1869); fJerLow.push_back(1.0626); fJerHi.push_back(1.3112);
    fJerEtaLow.push_back(-2.964); fJerEtaHi.push_back(-2.853); fJerDef.push_back(1.7788); fJerLow.push_back(1.578); fJerHi.push_back(1.9796);
    fJerEtaLow.push_back(-2.853); fJerEtaHi.push_back(-2.500); fJerDef.push_back(1.3418); fJerLow.push_back(1.1327); fJerHi.push_back(1.5509);
    fJerEtaLow.push_back(-2.500); fJerEtaHi.push_back(-2.322); fJerDef.push_back(1.2963); fJerLow.push_back(1.0592); fJerHi.push_back(1.5334);
    fJerEtaLow.push_back(-2.322); fJerEtaHi.push_back(-2.043); fJerDef.push_back(1.1512); fJerLow.push_back(1.0372); fJerHi.push_back(1.2652);
    fJerEtaLow.push_back(-2.043); fJerEtaHi.push_back(-1.930); fJerDef.push_back(1.1426); fJerLow.push_back(1.0212); fJerHi.push_back(1.264);
    fJerEtaLow.push_back(-1.930); fJerEtaHi.push_back(-1.740); fJerDef.push_back(1.1000); fJerLow.push_back(0.9921); fJerHi.push_back(1.2079);
    fJerEtaLow.push_back(-1.740); fJerEtaHi.push_back(-1.305); fJerDef.push_back(1.1278); fJerLow.push_back(1.0292); fJerHi.push_back(1.2264);
    fJerEtaLow.push_back(-1.305); fJerEtaHi.push_back(-1.131); fJerDef.push_back(1.1609); fJerLow.push_back(1.0584); fJerHi.push_back(1.2634);
    fJerEtaLow.push_back(-1.131); fJerEtaHi.push_back(-0.783); fJerDef.push_back(1.1464); fJerLow.push_back(1.0832); fJerHi.push_back(1.2096);
    fJerEtaLow.push_back(-0.783); fJerEtaHi.push_back(-0.522); fJerDef.push_back(1.1948); fJerLow.push_back(1.1296); fJerHi.push_back(1.26);
    fJerEtaLow.push_back(-0.522); fJerEtaHi.push_back(0.000); fJerDef.push_back(1.15958); fJerLow.push_back(1.095); fJerHi.push_back(1.224);
    fJerEtaLow.push_back(0.000); fJerEtaHi.push_back(0.522); fJerDef.push_back(1.15958); fJerLow.push_back(1.095); fJerHi.push_back(1.224);
    fJerEtaLow.push_back(0.522); fJerEtaHi.push_back(0.783); fJerDef.push_back(1.1948); fJerLow.push_back(1.1296); fJerHi.push_back(1.26);
    fJerEtaLow.push_back(0.783); fJerEtaHi.push_back(1.131); fJerDef.push_back(1.1464); fJerLow.push_back(1.0832); fJerHi.push_back(1.2096);
    fJerEtaLow.push_back(1.131); fJerEtaHi.push_back(1.305); fJerDef.push_back(1.1609); fJerLow.push_back(1.0584); fJerHi.push_back(1.2634);
    fJerEtaLow.push_back(1.305); fJerEtaHi.push_back(1.740); fJerDef.push_back(1.1278); fJerLow.push_back(1.0292); fJerHi.push_back(1.2264);
    fJerEtaLow.push_back(1.740); fJerEtaHi.push_back(1.930); fJerDef.push_back(1.1000); fJerLow.push_back(0.9921); fJerHi.push_back(1.2079);
    fJerEtaLow.push_back(1.930); fJerEtaHi.push_back(2.043); fJerDef.push_back(1.1426); fJerLow.push_back(1.0212); fJerHi.push_back(1.264);
    fJerEtaLow.push_back(2.043); fJerEtaHi.push_back(2.322); fJerDef.push_back(1.1512); fJerLow.push_back(1.0372); fJerHi.push_back(1.2652);
    fJerEtaLow.push_back(2.322); fJerEtaHi.push_back(2.500); fJerDef.push_back(1.2963); fJerLow.push_back(1.0592); fJerHi.push_back(1.5334);
    fJerEtaLow.push_back(2.500); fJerEtaHi.push_back(2.853); fJerDef.push_back(1.3418); fJerLow.push_back(1.1327); fJerHi.push_back(1.5509);
    fJerEtaLow.push_back(2.853); fJerEtaHi.push_back(2.964); fJerDef.push_back(1.7788); fJerLow.push_back(1.578); fJerHi.push_back(1.9796);
    fJerEtaLow.push_back(2.964); fJerEtaHi.push_back(3.139); fJerDef.push_back(1.1869); fJerLow.push_back(1.0626); fJerHi.push_back(1.3112);
    fJerEtaLow.push_back(3.139); fJerEtaHi.push_back(5.191); fJerDef.push_back(1.1922); fJerLow.push_back(1.0434); fJerHi.push_back(1.341);

    fJERSmearFunc = new TF1("fJERSmearFunc","sqrt( [0] * [0] + [1] * [1] / x )", 30., 800.);
    fJERSmearFunc->SetParameter(0, fAlphaJER);
    fJERSmearFunc->SetParameter(1, fBetaJER);

    if ( fVerbose ) {
        std::cout << "\t[DONE]\n";
    }
}

//________________
double ForestAODReader::retrieveResolutionFactor(const double& eta) {
    if ( fVerbose ) {
        std::cout << "ForestAODReader::retrieveResolutionFactor\n";
    }

    double val{1.};
    double res{0.};

    // Search for the bin index
    for (int i{0}; i<fJerEtaLow.size(); i++) {
        if ( eta>=fJerEtaLow.at(i) && eta<fJerEtaHi.at(i) ) {
            if ( fUseJERSystematics == -1 ) {
                val = fJerLow.at(i);
            }
            else if ( fUseJERSystematics == 0 ) {
                val = fJerDef.at(i);
            }
            else if ( fUseJERSystematics == 1 ) {
                val = fJerHi.at(i);
            }
            else {
                val = {1.};
            }
            break;
        }
    } // for (int i{0}; i<fJerEtaLow.size(); i++)

    res = TMath::Sqrt( TMath::Max(val * val - 1., 0.) );

    if ( fVerbose ) {
        std::cout << "eta: " << eta << "JER val: " << val << " Resolution factor: " << res << std::endl;
        std::cout << "\t[DONE]\n";
    }
    return res;
}

//________________
double ForestAODReader::extraJERCorr(const double &ptCorr, const double &eta) {
    // This factor applied to the reco jet pT after JEC to match data.
    // By default JEC is not fully cover data/MC JEC difference.
    // Extra correction should be applied to MC only.
    if ( fVerbose ) {
        std::cout << "ForestAODReader::extraJERCorr\n";
    }

    double res = retrieveResolutionFactor(eta);
    double sigmaSmear{0.};
    if ( ptCorr <= 30.) {
        sigmaSmear = res * fJERSmearFunc->Eval( 31. );
    }
    else if ( ptCorr >= 800 ) {
        sigmaSmear = res * fJERSmearFunc->Eval( 799. );
    }
    else {
        sigmaSmear = res * fJERSmearFunc->Eval( ptCorr );
    }

    double extraCorr = fRndm->Gaus( 1., sigmaSmear );

    if ( fVerbose ) {
        std::cout << "Resolution factor: " << res << " sigma: " << sigmaSmear 
                  << " correction factor: " << extraCorr << std::endl;
        std::cout << "\t[DONE]\n";
    }
    return extraCorr;
}

//________________
int ForestAODReader::findBinIndex(const double &val, double *array, int nBins) {
    int binIndex = -1;
    for (int i{0}; i<nBins; i++) {
        if ( val >= array[i] && val < array[i+1] ) {
            binIndex = i;
            break;
        }
    }
    return binIndex;
}

//________________
double ForestAODReader::jecManualCorrection(const double &pt, const double &eta) {

    if ( fVerbose ) {
        std::cout << "ForestAODReader::jecManualCorrection - begin\n";
        std::cout << "pt: " << pt << " eta: " << eta << std::endl;
    }

    // Array of eta bin edges (left edge included, right edge excluded)
    double jetEtaL2L3StdVals[] = { 
        -5.191, -4.889, -4.716, -4.538, -4.363, -4.191, 
        -4.013, -3.839, -3.664, -3.489, -3.314, -3.139, 
        -2.964, -2.853, -2.650, -2.500, -2.322, -2.172, 
        -2.043, -1.930, -1.830, -1.740, -1.653, -1.566, 
        -1.479, -1.392, -1.305, -1.218, -1.131, -1.044, 
        -0.957, -0.879, -0.783, -0.696, -0.609, -0.522, 
        -0.435, -0.348, -0.261, -0.174, -0.087,  0.000, 
         0.087,  0.174,  0.261,  0.348,  0.435,  0.522, 
         0.609,  0.696,  0.783,  0.879,  0.957,  1.044, 
         1.131,  1.218,  1.305,  1.392,  1.479,  1.566, 
         1.653,  1.740,  1.830,  1.930,  2.043,  2.172, 
         2.322,  2.500,  2.650,  2.853,  2.964,  3.139, 
         3.314,  3.489,  3.664,  3.839,  4.013,  4.191, 
         4.363,  4.538,  4.716,  4.889,  5.191 
    };
    int jetNEtaL2L3StdBins = sizeof(jetEtaL2L3StdVals)/sizeof(double)-1;

    // Find eta bin
    int iEta = findBinIndex(eta, jetEtaL2L3StdVals, jetNEtaL2L3StdBins);

    // Array of pt bin edges (left edge included, right edge excluded)
    double jetPtVals[] = {
        10, 15, 20, 25, 35, 45, 55, 65, 75, 85,
        95, 110, 130, 150, 180, 210, 250, 300, 360, 420,
        500, 600, 720, 860, 1100, 6500
    };
    int jetNPtBins = sizeof(jetPtVals) / sizeof(double) - 1;

    // Find pt bin
    int iPt = findBinIndex(pt, jetPtVals, jetNPtBins);

    double retVal = {0.};
    if ( (fIsMc && fIsPbGoing) || (!fIsMc && !fIsPbGoing) ) { // Pb-going in MC

        // [eta][pt] binning
        double corrFactor[82][25] = {
            {1.84613, 1.82127, 1.79521, 2.90307, 2.90307, 2.90307, 2.90307, 2.90307, 2.90307, 2.90307, 2.90307, 2.90307, 2.90307, 2.90307, 2.90307, 2.90307, 2.90307, 2.90307, 2.90307, 2.90307, 2.90307, 2.90307, 2.90307, 2.90307, 2.90307},
            {1.65806, 1.65541, 1.60675, 1.62702, 1.62702, 1.62702, 1.62702, 1.62702, 1.62702, 1.62702, 1.62702, 1.62702, 1.62702, 1.62702, 1.62702, 1.62702, 1.62702, 1.62702, 1.62702, 1.62702, 1.62702, 1.62702, 1.62702, 1.62702, 1.62702},
            {1.30734, 1.31693, 1.28338, 1.30493, 1.11147, 1.11147, 1.11147, 1.11147, 1.11147, 1.11147, 1.11147, 1.11147, 1.11147, 1.11147, 1.11147, 1.11147, 1.11147, 1.11147, 1.11147, 1.11147, 1.11147, 1.11147, 1.11147, 1.11147, 1.11147},
            {1.17667, 1.18279, 1.21663, 1.16689, 1.09944, 1.09944, 1.09944, 1.09944, 1.09944, 1.09944, 1.09944, 1.09944, 1.09944, 1.09944, 1.09944, 1.09944, 1.09944, 1.09944, 1.09944, 1.09944, 1.09944, 1.09944, 1.09944, 1.09944, 1.09944},
            {1.12441, 1.12263, 1.12632, 1.10116, 1.10838, 1.15027, 1.16484, 1.16484, 1.16484, 1.16484, 1.16484, 1.16484, 1.16484, 1.16484, 1.16484, 1.16484, 1.16484, 1.16484, 1.16484, 1.16484, 1.16484, 1.16484, 1.16484, 1.16484, 1.16484},
            {1.08555, 1.08742, 1.10846, 1.08158, 1.09567, 1.05142, 1.07496, 1.07496, 1.07496, 1.07496, 1.07496, 1.07496, 1.07496, 1.07496, 1.07496, 1.07496, 1.07496, 1.07496, 1.07496, 1.07496, 1.07496, 1.07496, 1.07496, 1.07496, 1.07496},
            {1.09384, 1.11186, 1.1147, 1.09545, 1.08466, 1.07114, 1.07016, 1.08535, 1.07734, 1.07734, 1.07734, 1.07734, 1.07734, 1.07734, 1.07734, 1.07734, 1.07734, 1.07734, 1.07734, 1.07734, 1.07734, 1.07734, 1.07734, 1.07734, 1.07734},
            {1.10862, 1.11461, 1.10901, 1.08913, 1.05183, 1.06306, 1.05293, 1.0367, 1.04016, 1.06055, 1.06055, 1.06055, 1.06055, 1.06055, 1.06055, 1.06055, 1.06055, 1.06055, 1.06055, 1.06055, 1.06055, 1.06055, 1.06055, 1.06055, 1.06055},
            {1.14583, 1.13781, 1.14154, 1.11396, 1.09364, 1.07493, 1.07665, 1.0833, 1.0491, 1.02529, 1.0253, 1.0253, 1.0253, 1.0253, 1.0253, 1.0253, 1.0253, 1.0253, 1.0253, 1.0253, 1.0253, 1.0253, 1.0253, 1.0253, 1.0253},
            {1.19094, 1.17448, 1.153, 1.13642, 1.12934, 1.10997, 1.07742, 1.06248, 1.0511, 1.03777, 1.03075, 0.970116, 1.01798, 1.01798, 1.01798, 1.01798, 1.01798, 1.01798, 1.01798, 1.01798, 1.01798, 1.01798, 1.01798, 1.01798, 1.01798},
            {1.26012, 1.23773, 1.21738, 1.18491, 1.14376, 1.11472, 1.08654, 1.07006, 1.04879, 1.03403, 1.02836, 1.01101, 1.00248, 1.05653, 1.05653, 1.05653, 1.05653, 1.05653, 1.05653, 1.05653, 1.05653, 1.05653, 1.05653, 1.05653, 1.05653},
            {1.38768, 1.37263, 1.32844, 1.28519, 1.24122, 1.23946, 1.22496, 1.20744, 1.22224, 1.19832, 1.17681, 1.1809, 1.19049, 1.12342, 1.24052, 1.24052, 1.24052, 1.24052, 1.24052, 1.24052, 1.24052, 1.24052, 1.24052, 1.24052, 1.24052},
            {1.34886, 1.30572, 1.25427, 1.22599, 1.21468, 1.21207, 1.19523, 1.20554, 1.19017, 1.17977, 1.17021, 1.13093, 1.11783, 1.09739, 1.06484, 1.06484, 1.06484, 1.06484, 1.06484, 1.06484, 1.06484, 1.06484, 1.06484, 1.06484, 1.06484},
            {1.37735, 1.26935, 1.22648, 1.18301, 1.14423, 1.13738, 1.12875, 1.12344, 1.12133, 1.11514, 1.10094, 1.09017, 1.08477, 1.06131, 1.05605, 1.02055, 1.00062, 1.00062, 1.00062, 1.00062, 1.00062, 1.00062, 1.00062, 1.00062, 1.00062},
            {1.38246, 1.30362, 1.25857, 1.22272, 1.16669, 1.13652, 1.13713, 1.14006, 1.13228, 1.13176, 1.1313, 1.11296, 1.09551, 1.08912, 1.06462, 1.07164, 1.05698, 1.05698, 1.05698, 1.05698, 1.05698, 1.05698, 1.05698, 1.05698, 1.05698},
            {1.27344, 1.24817, 1.21415, 1.18677, 1.15617, 1.15123, 1.14136, 1.13899, 1.13253, 1.12808, 1.12554, 1.11036, 1.10351, 1.08922, 1.07929, 1.06051, 1.05604, 1.06042, 1.02459, 1.02459, 1.02459, 1.02459, 1.02459, 1.02459, 1.02459},
            {1.19298, 1.19091, 1.16939, 1.15089, 1.13382, 1.12567, 1.12385, 1.12604, 1.12627, 1.12251, 1.12173, 1.11134, 1.10681, 1.09758, 1.08669, 1.08, 1.06847, 1.05526, 1.05963, 1.06416, 1.06416, 1.06416, 1.06416, 1.06416, 1.06416},
            {1.17715, 1.16969, 1.1466, 1.13564, 1.1391, 1.12188, 1.12221, 1.11536, 1.11955, 1.11694, 1.11827, 1.11818, 1.10725, 1.1051, 1.08985, 1.08727, 1.08155, 1.06993, 1.05733, 1.05917, 1.05917, 1.05917, 1.05917, 1.05917, 1.05917},
            {1.17199, 1.16292, 1.14602, 1.14581, 1.13832, 1.1361, 1.12447, 1.12522, 1.12314, 1.12778, 1.12755, 1.12017, 1.11544, 1.11556, 1.11425, 1.09249, 1.08923, 1.07978, 1.07144, 1.0589, 1.06501, 1.06501, 1.06501, 1.06501, 1.06501},
            {1.16788, 1.16632, 1.16648, 1.13559, 1.14475, 1.13116, 1.12693, 1.13845, 1.12716, 1.13231, 1.13224, 1.12858, 1.12819, 1.12814, 1.11986, 1.10971, 1.10436, 1.09553, 1.087, 1.07857, 1.061, 1.061, 1.061, 1.061, 1.061},
            {1.15706, 1.17063, 1.16955, 1.14144, 1.16337, 1.14024, 1.12845, 1.13082, 1.13055, 1.12814, 1.13333, 1.1299, 1.12927, 1.12706, 1.12508, 1.11955, 1.11173, 1.1009, 1.10427, 1.08914, 1.07034, 1.10634, 1.10634, 1.10634, 1.10634},
            {1.16416, 1.1575, 1.14576, 1.13665, 1.14123, 1.11784, 1.11048, 1.11795, 1.1142, 1.1123, 1.10904, 1.11546, 1.11351, 1.12015, 1.11719, 1.11047, 1.10325, 1.09704, 1.09524, 1.07731, 1.07541, 1.06534, 1.06534, 1.06534, 1.06534},
            {1.15107, 1.14472, 1.1317, 1.13048, 1.11436, 1.11104, 1.08658, 1.1059, 1.09812, 1.09758, 1.09549, 1.09893, 1.0988, 1.09849, 1.0999, 1.09591, 1.09286, 1.08607, 1.08592, 1.07708, 1.06962, 1.0762, 1.07222, 1.07222, 1.07222},
            {1.15641, 1.14586, 1.13155, 1.12958, 1.11818, 1.14055, 1.11757, 1.11808, 1.11346, 1.12074, 1.12246, 1.12386, 1.12458, 1.13356, 1.13107, 1.13329, 1.12956, 1.12393, 1.11309, 1.10756, 1.10128, 1.09466, 1.08258, 1.08258, 1.08258},
            {1.17045, 1.17658, 1.12158, 1.14903, 1.13773, 1.121, 1.12619, 1.12289, 1.12308, 1.13132, 1.13288, 1.13129, 1.13631, 1.1419, 1.14379, 1.13621, 1.14851, 1.14193, 1.14258, 1.13987, 1.13685, 1.12758, 1.12126, 1.12126, 1.12126},
            {1.16283, 1.16315, 1.14288, 1.13997, 1.14411, 1.12191, 1.12274, 1.11458, 1.11844, 1.1157, 1.11694, 1.12674, 1.13198, 1.1286, 1.1304, 1.12229, 1.12579, 1.12086, 1.11373, 1.11555, 1.11309, 1.11358, 1.09223, 1.1312, 1.1312},
            {1.15362, 1.14777, 1.14856, 1.14484, 1.13612, 1.09448, 1.11747, 1.11741, 1.11803, 1.11424, 1.11965, 1.118, 1.12289, 1.12194, 1.12013, 1.12586, 1.13134, 1.12492, 1.12414, 1.1192, 1.1203, 1.11308, 1.10497, 1.10286, 1.10286},
            {1.13902, 1.14892, 1.12624, 1.11421, 1.12323, 1.10409, 1.09791, 1.10496, 1.10383, 1.10752, 1.10364, 1.10673, 1.11186, 1.10991, 1.11032, 1.1134, 1.11776, 1.11102, 1.10741, 1.10696, 1.10502, 1.09952, 1.09307, 1.09587, 1.09587},
            {1.12321, 1.11413, 1.11013, 1.101, 1.08522, 1.0782, 1.08769, 1.08568, 1.08427, 1.0874, 1.09115, 1.09371, 1.09397, 1.09705, 1.09883, 1.10138, 1.10216, 1.09824, 1.0991, 1.09878, 1.09799, 1.09433, 1.09248, 1.08875, 1.08875},
            {1.1062, 1.09784, 1.10025, 1.079, 1.07295, 1.06941, 1.07165, 1.07112, 1.06962, 1.06797, 1.07945, 1.0768, 1.08089, 1.08353, 1.08273, 1.08537, 1.08655, 1.0895, 1.08606, 1.08746, 1.08553, 1.08208, 1.07672, 1.07992, 1.07461},
            {1.10578, 1.09661, 1.07838, 1.07005, 1.06606, 1.06051, 1.06508, 1.06233, 1.06757, 1.06016, 1.06357, 1.06266, 1.07338, 1.07114, 1.08035, 1.08516, 1.08297, 1.08641, 1.08303, 1.08617, 1.08229, 1.08602, 1.08179, 1.07202, 1.07202},
            {1.08775, 1.06706, 1.07353, 1.07791, 1.06378, 1.04494, 1.04707, 1.05222, 1.05873, 1.05751, 1.05797, 1.05858, 1.0639, 1.0629, 1.06854, 1.07294, 1.07205, 1.07652, 1.07621, 1.07511, 1.07556, 1.07296, 1.06993, 1.06712, 1.04356},
            {1.07015, 1.07085, 1.07607, 1.06598, 1.06316, 1.03908, 1.04581, 1.04504, 1.04666, 1.04544, 1.0541, 1.05447, 1.05736, 1.06103, 1.06159, 1.06159, 1.06757, 1.06875, 1.06877, 1.07111, 1.06794, 1.06596, 1.06591, 1.06298, 1.06017},
            {1.07984, 1.06322, 1.06729, 1.04957, 1.0462, 1.03733, 1.04408, 1.04116, 1.0426, 1.04802, 1.04497, 1.04965, 1.0493, 1.05932, 1.06005, 1.06292, 1.06453, 1.06605, 1.066, 1.06472, 1.06455, 1.06469, 1.05992, 1.05962, 1.05028},
            {1.07937, 1.06469, 1.06811, 1.06175, 1.05541, 1.05575, 1.0443, 1.04287, 1.049, 1.04558, 1.04727, 1.04987, 1.05301, 1.05688, 1.05576, 1.06446, 1.06108, 1.06523, 1.06477, 1.06504, 1.06584, 1.06327, 1.06099, 1.0605, 1.05555},
            {1.07637, 1.07776, 1.07402, 1.06466, 1.06116, 1.05006, 1.05187, 1.04976, 1.05491, 1.04313, 1.05134, 1.05533, 1.05491, 1.05679, 1.05889, 1.06088, 1.06425, 1.06562, 1.06435, 1.06752, 1.06563, 1.06588, 1.06283, 1.06204, 1.05243},
            {1.08603, 1.0748, 1.07109, 1.06559, 1.05012, 1.0363, 1.04676, 1.05396, 1.05205, 1.05383, 1.05088, 1.05415, 1.05485, 1.05553, 1.0611, 1.06097, 1.06226, 1.06489, 1.06776, 1.06647, 1.06492, 1.0651, 1.06382, 1.06191, 1.05509},
            {1.08625, 1.08197, 1.05755, 1.05147, 1.04248, 1.03824, 1.0573, 1.04744, 1.04659, 1.05383, 1.04947, 1.0563, 1.05395, 1.05203, 1.05752, 1.05922, 1.06313, 1.06415, 1.06209, 1.06259, 1.06525, 1.06298, 1.06039, 1.05804, 1.053},
            {1.07818, 1.07386, 1.05927, 1.05611, 1.05074, 1.04504, 1.04625, 1.04807, 1.05048, 1.05026, 1.04896, 1.04959, 1.05051, 1.05382, 1.05821, 1.05899, 1.06175, 1.06115, 1.06323, 1.06578, 1.06537, 1.0635, 1.06191, 1.0593, 1.05768},
            {1.08722, 1.08142, 1.06354, 1.05571, 1.06695, 1.03959, 1.04799, 1.04495, 1.05017, 1.05403, 1.05131, 1.05722, 1.05582, 1.05878, 1.05741, 1.05946, 1.0603, 1.06481, 1.06669, 1.06614, 1.0672, 1.06566, 1.06248, 1.06178, 1.05519},
            {1.09333, 1.06967, 1.0647, 1.05534, 1.05167, 1.04989, 1.04959, 1.05472, 1.05244, 1.05249, 1.05007, 1.05295, 1.05567, 1.05426, 1.05841, 1.06118, 1.06414, 1.06507, 1.06758, 1.06614, 1.06528, 1.06455, 1.06167, 1.05969, 1.05964},
            {1.09453, 1.07095, 1.06108, 1.05412, 1.05346, 1.04559, 1.05033, 1.0522, 1.04678, 1.05887, 1.05689, 1.05785, 1.05793, 1.05848, 1.06314, 1.06094, 1.06405, 1.06791, 1.07374, 1.06855, 1.06814, 1.06832, 1.06527, 1.06419, 1.05502},
            {1.08056, 1.07748, 1.06893, 1.06166, 1.05672, 1.05987, 1.05744, 1.05051, 1.05115, 1.05644, 1.05363, 1.0601, 1.05948, 1.05939, 1.06494, 1.06494, 1.06749, 1.07008, 1.07215, 1.07207, 1.07258, 1.07145, 1.07197, 1.0693, 1.0625},
            {1.08379, 1.07128, 1.06929, 1.06824, 1.06516, 1.05932, 1.05524, 1.05411, 1.05415, 1.05103, 1.05351, 1.05775, 1.05933, 1.05859, 1.06162, 1.06902, 1.06561, 1.07099, 1.07072, 1.07239, 1.0711, 1.07117, 1.06773, 1.06394, 1.06305},
            {1.08051, 1.07493, 1.07548, 1.06403, 1.06592, 1.0539, 1.05497, 1.06603, 1.04843, 1.05076, 1.05676, 1.05345, 1.05581, 1.05904, 1.06059, 1.06615, 1.06791, 1.06779, 1.06946, 1.07128, 1.0732, 1.07012, 1.06936, 1.06737, 1.06269},
            {1.08442, 1.08203, 1.06825, 1.06076, 1.06034, 1.04729, 1.05155, 1.06231, 1.05532, 1.05762, 1.0567, 1.05622, 1.05494, 1.06039, 1.06252, 1.0656, 1.06687, 1.0674, 1.07223, 1.07167, 1.07073, 1.07097, 1.07004, 1.06785, 1.06541},
            {1.08265, 1.08824, 1.0696, 1.06153, 1.04926, 1.05804, 1.05355, 1.05173, 1.05301, 1.0567, 1.05854, 1.05857, 1.06059, 1.06065, 1.06493, 1.06634, 1.06903, 1.07161, 1.0736, 1.07591, 1.07485, 1.07303, 1.07217, 1.06904, 1.06611},
            {1.08194, 1.08083, 1.07628, 1.07313, 1.0544, 1.05153, 1.04563, 1.04517, 1.05449, 1.04849, 1.04841, 1.05071, 1.05506, 1.0627, 1.06065, 1.06468, 1.06705, 1.07135, 1.07256, 1.07174, 1.07182, 1.06998, 1.06861, 1.06706, 1.06314},
            {1.0808, 1.06261, 1.07544, 1.05803, 1.04571, 1.04642, 1.0513, 1.04729, 1.0475, 1.05182, 1.05126, 1.05819, 1.05814, 1.05734, 1.06183, 1.06703, 1.06918, 1.07036, 1.06902, 1.07296, 1.0723, 1.07055, 1.06937, 1.06683, 1.06192},
            {1.08392, 1.0806, 1.0682, 1.07235, 1.05059, 1.06171, 1.04917, 1.05316, 1.05255, 1.05891, 1.05503, 1.05912, 1.06316, 1.06709, 1.0719, 1.07129, 1.07671, 1.07663, 1.08099, 1.08186, 1.08134, 1.07784, 1.07981, 1.07873, 1.0729},
            {1.08868, 1.08674, 1.08615, 1.06889, 1.06, 1.0596, 1.06061, 1.0608, 1.05679, 1.06075, 1.05896, 1.06443, 1.0675, 1.07116, 1.07586, 1.07753, 1.08122, 1.08287, 1.08563, 1.08623, 1.08638, 1.08359, 1.08373, 1.08213, 1.07837},
            {1.10496, 1.10426, 1.08726, 1.07616, 1.07115, 1.06287, 1.06862, 1.07146, 1.06027, 1.06659, 1.07165, 1.07216, 1.07242, 1.07842, 1.07788, 1.08431, 1.09044, 1.09004, 1.09087, 1.09246, 1.08991, 1.08921, 1.08818, 1.08692, 1.08113},
            {1.11529, 1.10944, 1.09934, 1.09346, 1.08618, 1.0765, 1.07453, 1.07486, 1.07054, 1.07468, 1.08115, 1.07732, 1.07717, 1.08219, 1.08846, 1.08952, 1.09023, 1.09264, 1.09446, 1.09278, 1.09432, 1.09061, 1.08642, 1.08457, 1.07122},
            {1.13181, 1.12188, 1.11453, 1.11251, 1.10265, 1.09771, 1.08597, 1.08602, 1.08393, 1.08452, 1.09049, 1.09304, 1.0959, 1.09773, 1.10161, 1.10306, 1.10403, 1.10192, 1.10318, 1.10331, 1.10092, 1.09612, 1.09809, 1.09267, 1.07897},
            {1.13885, 1.14232, 1.13748, 1.11858, 1.11556, 1.10809, 1.10117, 1.10529, 1.09754, 1.10191, 1.1022, 1.10591, 1.11097, 1.10879, 1.1154, 1.11772, 1.11717, 1.11702, 1.11658, 1.11666, 1.11392, 1.11174, 1.10853, 1.10174, 1.09461},
            {1.16429, 1.16142, 1.15309, 1.1363, 1.13221, 1.11748, 1.11963, 1.12024, 1.11965, 1.11237, 1.12042, 1.12149, 1.12525, 1.12939, 1.1328, 1.13587, 1.13342, 1.1309, 1.12753, 1.12832, 1.12564, 1.12187, 1.11893, 1.11667, 1.10164},
            {1.17251, 1.16957, 1.16007, 1.16031, 1.14253, 1.13195, 1.12672, 1.12686, 1.12824, 1.13209, 1.12264, 1.12569, 1.13448, 1.1323, 1.13065, 1.13308, 1.13407, 1.1303, 1.12941, 1.12928, 1.12579, 1.12262, 1.11809, 1.11617, 1.1167},
            {1.17876, 1.16101, 1.16459, 1.15075, 1.14242, 1.12952, 1.12203, 1.12227, 1.13068, 1.13044, 1.13593, 1.1366, 1.13841, 1.1448, 1.14017, 1.14832, 1.14488, 1.14932, 1.1469, 1.14395, 1.13876, 1.13848, 1.13261, 1.13153, 1.12017},
            {1.16762, 1.15711, 1.1623, 1.14119, 1.13648, 1.13754, 1.12936, 1.12186, 1.12598, 1.12614, 1.12456, 1.12511, 1.13123, 1.13573, 1.14104, 1.14003, 1.13836, 1.13091, 1.12708, 1.11623, 1.109, 1.10213, 1.09459, 1.09104, 1.07027},
            {1.17903, 1.16337, 1.1571, 1.13854, 1.12692, 1.1251, 1.11487, 1.10642, 1.11307, 1.10608, 1.10793, 1.10812, 1.10596, 1.10836, 1.10737, 1.10866, 1.10446, 1.09763, 1.09285, 1.08905, 1.08055, 1.07278, 1.06832, 1.05661, 1.05744},
            {1.16951, 1.17754, 1.15363, 1.15564, 1.13757, 1.10083, 1.11297, 1.11687, 1.11303, 1.10369, 1.11451, 1.1106, 1.10545, 1.11231, 1.11029, 1.10839, 1.10175, 1.09544, 1.08989, 1.08463, 1.07597, 1.06844, 1.06221, 1.05502, 1.04427},
            {1.18623, 1.18821, 1.17647, 1.1721, 1.15288, 1.1495, 1.13436, 1.12994, 1.12849, 1.12782, 1.12739, 1.12763, 1.12657, 1.13193, 1.1243, 1.11544, 1.10926, 1.09643, 1.09207, 1.08463, 1.07523, 1.06856, 1.06217, 1.0549, 1.07274},
            {1.19273, 1.19257, 1.19106, 1.17431, 1.17685, 1.14801, 1.14463, 1.14029, 1.1389, 1.14439, 1.1429, 1.14289, 1.13955, 1.13669, 1.12861, 1.12418, 1.11139, 1.10346, 1.09481, 1.08713, 1.07699, 1.06975, 1.06011, 1.06067, 1.06039},
            {1.19839, 1.18919, 1.19148, 1.17422, 1.1516, 1.14542, 1.14776, 1.14616, 1.14347, 1.14401, 1.14575, 1.14478, 1.14241, 1.13875, 1.13514, 1.12637, 1.11894, 1.10033, 1.0957, 1.08444, 1.07847, 1.07276, 1.064, 1.05936, 1.05092},
            {1.20552, 1.19524, 1.17636, 1.16945, 1.14821, 1.15423, 1.14601, 1.14899, 1.14056, 1.15181, 1.14996, 1.13864, 1.14048, 1.1389, 1.12525, 1.11729, 1.10634, 1.09808, 1.0889, 1.08375, 1.07449, 1.07028, 1.06558, 1.06872, 1.06872},
            {1.21936, 1.20576, 1.19502, 1.17609, 1.1633, 1.15508, 1.15178, 1.14233, 1.14805, 1.14786, 1.1456, 1.1411, 1.13512, 1.13071, 1.11926, 1.11039, 1.0993, 1.09087, 1.08125, 1.07413, 1.07207, 1.06369, 1.0547, 1.04856, 1.04856},
            {1.29761, 1.27046, 1.24395, 1.20616, 1.18611, 1.16522, 1.16323, 1.15895, 1.1612, 1.14857, 1.14794, 1.13482, 1.12009, 1.11418, 1.10161, 1.08688, 1.07626, 1.06773, 1.05958, 1.05212, 1.0506, 1.04532, 1.04484, 1.04484, 1.04484},
            {1.42202, 1.33907, 1.29292, 1.229, 1.17996, 1.16422, 1.15802, 1.15965, 1.15124, 1.14578, 1.14498, 1.13138, 1.11789, 1.10702, 1.09048, 1.08025, 1.05966, 1.05181, 1.04079, 1.03164, 1.02581, 1.02334, 1.05889, 1.05889, 1.05889},
            {1.39632, 1.30462, 1.25729, 1.2044, 1.17014, 1.15804, 1.14843, 1.13888, 1.13737, 1.13562, 1.12196, 1.10834, 1.09548, 1.07813, 1.0586, 1.04453, 1.02904, 1.02016, 1.0018, 1.00021, 0.993422, 0.965977, 0.965977, 0.965977, 0.965977},
            {1.37565, 1.32587, 1.30257, 1.26284, 1.21684, 1.22396, 1.21078, 1.22078, 1.20911, 1.19625, 1.17956, 1.16855, 1.14529, 1.1278, 1.09676, 1.07341, 1.04617, 1.02892, 1.01679, 1.0146, 1.00141, 1.00141, 1.00141, 1.00141, 1.00141},
            {1.41785, 1.38226, 1.33175, 1.30603, 1.28164, 1.24926, 1.24205, 1.22206, 1.20949, 1.19699, 1.18631, 1.16746, 1.16233, 1.14566, 1.12795, 1.10258, 1.09905, 1.09103, 1.08308, 1.09056, 0.999728, 0.999728, 0.999728, 0.999728, 0.999728},
            {1.29801, 1.26804, 1.2333, 1.21176, 1.17905, 1.12488, 1.10663, 1.08672, 1.07513, 1.06062, 1.05023, 1.03497, 1.01691, 1.00074, 0.991109, 0.988334, 0.968797, 0.945613, 0.953283, 0.953283, 0.953283, 0.953283, 0.953283, 0.953283, 0.953283},
            {1.2208, 1.20441, 1.18855, 1.16217, 1.13873, 1.11636, 1.09525, 1.07853, 1.06656, 1.05587, 1.04893, 1.0313, 1.02371, 1.00727, 0.992779, 0.974983, 0.970284, 0.945249, 0.945249, 0.945249, 0.945249, 0.945249, 0.945249, 0.945249, 0.945249},
            {1.17004, 1.17362, 1.15368, 1.16039, 1.1175, 1.10731, 1.08708, 1.07488, 1.07333, 1.06614, 1.05078, 1.03941, 1.02309, 1.0175, 1.0141, 0.999471, 1.02903, 1.02903, 1.02903, 1.02903, 1.02903, 1.02903, 1.02903, 1.02903, 1.02903},
            {1.12889, 1.13274, 1.12786, 1.10489, 1.0864, 1.088, 1.07083, 1.05824, 1.03993, 1.03553, 1.03088, 1.01955, 1.00507, 0.996135, 1.00699, 1.00104, 1.00104, 1.00104, 1.00104, 1.00104, 1.00104, 1.00104, 1.00104, 1.00104, 1.00104},
            {1.12311, 1.13149, 1.12857, 1.11528, 1.10052, 1.09295, 1.06589, 1.06621, 1.05307, 1.04379, 1.0405, 1.01853, 1.0107, 1.03214, 0.997522, 0.997522, 0.997522, 0.997522, 0.997522, 0.997522, 0.997522, 0.997522, 0.997522, 0.997522, 0.997522},
            {1.13151, 1.13217, 1.14197, 1.12154, 1.0967, 1.09574, 1.08463, 1.06928, 1.05973, 1.07587, 1.04953, 1.06008, 1.03593, 0.971778, 0.971778, 0.971778, 0.971778, 0.971778, 0.971778, 0.971778, 0.971778, 0.971778, 0.971778, 0.971778, 0.971778},
            {1.15252, 1.16524, 1.1676, 1.1497, 1.12966, 1.10944, 1.09813, 1.09033, 1.08706, 1.08406, 1.05947, 1.07469, 1.12782, 1.12782, 1.12782, 1.12782, 1.12782, 1.12782, 1.12782, 1.12782, 1.12782, 1.12782, 1.12782, 1.12782, 1.12782},
            {1.21428, 1.22062, 1.20874, 1.20457, 1.17136, 1.16609, 1.14211, 1.13532, 1.1073, 1.09377, 1.12343, 1.09462, 1.09462, 1.09462, 1.09462, 1.09462, 1.09462, 1.09462, 1.09462, 1.09462, 1.09462, 1.09462, 1.09462, 1.09462, 1.09462},
            {1.35757, 1.35532, 1.36159, 1.33099, 1.31269, 1.30351, 1.25352, 1.22325, 1.22686, 1.19205, 1.16654, 1.16654, 1.16654, 1.16654, 1.16654, 1.16654, 1.16654, 1.16654, 1.16654, 1.16654, 1.16654, 1.16654, 1.16654, 1.16654, 1.16654},
            {1.65818, 1.69587, 1.72218, 1.60872, 1.66259, 1.56303, 1.43462, 1.66614, 1.65786, 1.19856, 1.19856, 1.19856, 1.19856, 1.19856, 1.19856, 1.19856, 1.19856, 1.19856, 1.19856, 1.19856, 1.19856, 1.19856, 1.19856, 1.19856, 1.19856},
            {1.94199, 1.89387, 1.83953, 1.83903, 1.71731, 1.66104, 1.73622, 1.72571, 1.72571, 1.72571, 1.72571, 1.72571, 1.72571, 1.72571, 1.72571, 1.72571, 1.72571, 1.72571, 1.72571, 1.72571, 1.72571, 1.72571, 1.72571, 1.72571, 1.72571}
        };
        

        // L2L3Relative (RecoRaw/Gen)
        if ( iEta >= 0 && iEta < jetNEtaL2L3StdBins && iPt >= 0 && iPt < jetNPtBins ) {
            retVal = corrFactor[iEta][iPt];
        }
    } // if ( (fIsMc && fIsPbGoing) || (!fIsMc && !fIsPbGoing) )
    else if ( (fIsMc && !fIsPbGoing) || (!fIsMc && fIsPbGoing) ) { // p-going in MC


        // [eta][pt] binning
        double corrFactor[82][25] = {
            {1.8246, 1.80338, 1.87202, 1.82798, 1.82798, 1.82798, 1.82798, 1.82798, 1.82798, 1.82798, 1.82798, 1.82798, 1.82798, 1.82798, 1.82798, 1.82798, 1.82798, 1.82798, 1.82798, 1.82798, 1.82798, 1.82798, 1.82798, 1.82798, 1.82798},
            {1.62621, 1.68121, 1.53301, 1.64831, 1.64831, 1.64831, 1.64831, 1.64831, 1.64831, 1.64831, 1.64831, 1.64831, 1.64831, 1.64831, 1.64831, 1.64831, 1.64831, 1.64831, 1.64831, 1.64831, 1.64831, 1.64831, 1.64831, 1.64831, 1.64831},
            {1.30499, 1.31954, 1.29465, 1.30825, 1.04353, 1.04353, 1.04353, 1.04353, 1.04353, 1.04353, 1.04353, 1.04353, 1.04353, 1.04353, 1.04353, 1.04353, 1.04353, 1.04353, 1.04353, 1.04353, 1.04353, 1.04353, 1.04353, 1.04353, 1.04353},
            {1.17738, 1.18227, 1.17399, 1.17126, 1.07915, 1.07915, 1.07915, 1.07915, 1.07915, 1.07915, 1.07915, 1.07915, 1.07915, 1.07915, 1.07915, 1.07915, 1.07915, 1.07915, 1.07915, 1.07915, 1.07915, 1.07915, 1.07915, 1.07915, 1.07915},
            {1.11625, 1.1348, 1.13419, 1.12515, 1.09493, 1.12138, 1.12138, 1.12138, 1.12138, 1.12138, 1.12138, 1.12138, 1.12138, 1.12138, 1.12138, 1.12138, 1.12138, 1.12138, 1.12138, 1.12138, 1.12138, 1.12138, 1.12138, 1.12138, 1.12138},
            {1.10449, 1.10624, 1.10849, 1.10535, 1.0695, 1.02663, 1.00562, 1.00562, 1.00562, 1.00562, 1.00562, 1.00562, 1.00562, 1.00562, 1.00562, 1.00562, 1.00562, 1.00562, 1.00562, 1.00562, 1.00562, 1.00562, 1.00562, 1.00562, 1.00562},
            {1.09264, 1.09459, 1.10311, 1.0882, 1.06821, 1.05113, 1.05353, 1.05124, 1.08572, 1.08572, 1.08572, 1.08572, 1.08572, 1.08572, 1.08572, 1.08572, 1.08572, 1.08572, 1.08572, 1.08572, 1.08572, 1.08572, 1.08572, 1.08572, 1.08572},
            {1.09597, 1.09196, 1.09281, 1.08907, 1.06604, 1.04597, 1.01811, 1.04312, 0.968673, 1.01047, 1.01047, 1.01047, 1.01047, 1.01047, 1.01047, 1.01047, 1.01047, 1.01047, 1.01047, 1.01047, 1.01047, 1.01047, 1.01047, 1.01047, 1.01047},
            {1.14284, 1.14576, 1.13268, 1.12498, 1.10993, 1.08598, 1.08353, 1.03885, 1.0607, 1.02755, 1.11537, 1.11537, 1.11537, 1.11537, 1.11537, 1.11537, 1.11537, 1.11537, 1.11537, 1.11537, 1.11537, 1.11537, 1.11537, 1.11537, 1.11537},
            {1.17742, 1.16949, 1.15832, 1.14732, 1.10081, 1.09585, 1.08092, 1.05407, 1.03416, 1.04212, 1.02478, 0.991787, 1.0521, 1.0521, 1.0521, 1.0521, 1.0521, 1.0521, 1.0521, 1.0521, 1.0521, 1.0521, 1.0521, 1.0521, 1.0521},
            {1.26611, 1.24389, 1.20991, 1.17452, 1.14179, 1.10808, 1.08443, 1.07136, 1.03537, 1.0412, 1.03876, 1.01028, 1.00211, 0.947006, 0.947006, 0.947006, 0.947006, 0.947006, 0.947006, 0.947006, 0.947006, 0.947006, 0.947006, 0.947006, 0.947006},
            {1.39122, 1.35635, 1.31671, 1.29927, 1.2538, 1.24323, 1.23041, 1.19926, 1.19057, 1.20102, 1.17386, 1.16764, 1.14339, 1.15844, 1.1371, 1.1371, 1.1371, 1.1371, 1.1371, 1.1371, 1.1371, 1.1371, 1.1371, 1.1371, 1.1371},
            {1.34276, 1.29498, 1.27569, 1.22531, 1.21201, 1.19966, 1.20603, 1.18059, 1.19018, 1.1726, 1.16382, 1.13403, 1.11268, 1.07762, 1.12803, 1.17704, 1.17704, 1.17704, 1.17704, 1.17704, 1.17704, 1.17704, 1.17704, 1.17704, 1.17704},
            {1.36827, 1.28162, 1.22751, 1.18732, 1.14743, 1.13898, 1.13659, 1.12599, 1.12122, 1.11462, 1.1043, 1.09506, 1.07314, 1.0582, 1.03166, 1.03175, 1.02231, 1.02231, 1.02231, 1.02231, 1.02231, 1.02231, 1.02231, 1.02231, 1.02231},
            {1.36794, 1.29856, 1.24881, 1.20664, 1.15936, 1.1513, 1.14615, 1.1433, 1.13445, 1.13314, 1.12189, 1.11286, 1.11834, 1.08511, 1.06358, 1.04748, 1.05975, 1.06164, 1.06164, 1.06164, 1.06164, 1.06164, 1.06164, 1.06164, 1.06164},
            {1.25585, 1.23262, 1.21283, 1.18216, 1.16687, 1.14468, 1.14247, 1.142, 1.14256, 1.1353, 1.1301, 1.11121, 1.10822, 1.10079, 1.08007, 1.0696, 1.05212, 1.05352, 1.0487, 1.0487, 1.0487, 1.0487, 1.0487, 1.0487, 1.0487},
            {1.19538, 1.19182, 1.17786, 1.16186, 1.1464, 1.13524, 1.13008, 1.13566, 1.14171, 1.13723, 1.12777, 1.1267, 1.12081, 1.11221, 1.10117, 1.09253, 1.08111, 1.07245, 1.0484, 1.0484, 1.0484, 1.0484, 1.0484, 1.0484, 1.0484},
            {1.18456, 1.17073, 1.16325, 1.16062, 1.14498, 1.13697, 1.14534, 1.13645, 1.13182, 1.13419, 1.13006, 1.13228, 1.12382, 1.12353, 1.11547, 1.10355, 1.09334, 1.08751, 1.08815, 1.06613, 1.06613, 1.06613, 1.06613, 1.06613, 1.06613},
            {1.189, 1.18305, 1.17291, 1.15424, 1.14629, 1.14148, 1.14266, 1.13759, 1.13678, 1.13918, 1.13327, 1.13148, 1.13605, 1.12435, 1.11704, 1.10998, 1.0973, 1.08516, 1.07868, 1.07582, 1.07582, 1.07582, 1.07582, 1.07582, 1.07582},
            {1.18596, 1.17831, 1.16121, 1.16324, 1.14291, 1.14387, 1.13342, 1.13563, 1.12808, 1.12725, 1.12694, 1.13271, 1.12952, 1.12053, 1.11509, 1.10922, 1.10124, 1.09056, 1.07824, 1.06689, 1.06375, 1.05361, 1.05361, 1.05361, 1.05361},
            {1.1719, 1.16231, 1.1452, 1.14622, 1.13904, 1.11966, 1.11467, 1.13066, 1.11468, 1.12194, 1.12641, 1.11248, 1.11524, 1.11408, 1.10777, 1.10422, 1.09232, 1.08302, 1.08055, 1.06937, 1.07166, 1.04863, 1.04863, 1.04863, 1.04863},
            {1.16021, 1.14718, 1.15581, 1.12943, 1.12741, 1.09936, 1.11553, 1.10659, 1.10193, 1.10041, 1.10255, 1.10519, 1.10357, 1.10229, 1.09889, 1.09966, 1.08466, 1.08283, 1.07268, 1.06736, 1.06872, 1.051, 1.051, 1.051, 1.051},
            {1.15464, 1.15266, 1.13899, 1.13719, 1.12395, 1.1084, 1.0927, 1.0958, 1.0957, 1.09801, 1.09367, 1.10059, 1.09971, 1.10323, 1.10246, 1.09888, 1.09176, 1.08519, 1.07848, 1.07418, 1.07327, 1.05269, 1.02186, 1.02186, 1.02186},
            {1.15813, 1.14175, 1.14928, 1.14127, 1.12748, 1.11336, 1.12177, 1.12691, 1.11909, 1.12574, 1.12371, 1.11594, 1.12995, 1.13124, 1.13303, 1.13275, 1.12994, 1.1243, 1.11336, 1.10807, 1.09519, 1.09324, 1.10503, 1.10503, 1.10503},
            {1.1612, 1.1643, 1.14839, 1.14644, 1.12892, 1.1313, 1.12612, 1.12659, 1.12854, 1.11937, 1.13131, 1.12577, 1.13349, 1.1343, 1.13907, 1.14097, 1.1333, 1.13658, 1.13224, 1.13121, 1.13124, 1.12053, 1.12048, 1.12048, 1.12048},
            {1.15426, 1.15281, 1.15464, 1.14412, 1.12354, 1.11248, 1.12602, 1.11778, 1.11629, 1.11859, 1.11657, 1.12048, 1.12578, 1.12713, 1.12502, 1.12273, 1.12246, 1.11882, 1.11711, 1.11829, 1.11277, 1.11588, 1.10665, 1.10665, 1.10665},
            {1.14418, 1.1499, 1.14462, 1.13391, 1.12138, 1.1159, 1.11197, 1.10492, 1.11458, 1.11652, 1.11649, 1.12166, 1.11714, 1.11865, 1.12085, 1.127, 1.12042, 1.12011, 1.11713, 1.11775, 1.11169, 1.1141, 1.10866, 1.09957, 1.09957},
            {1.14063, 1.12303, 1.11808, 1.11998, 1.11349, 1.10289, 1.10096, 1.09371, 1.09389, 1.09884, 1.09306, 1.10181, 1.10595, 1.10535, 1.10863, 1.11101, 1.10846, 1.10935, 1.10834, 1.10732, 1.10009, 1.10529, 1.10586, 1.09577, 1.09577},
            {1.12408, 1.11568, 1.11, 1.10941, 1.09739, 1.07976, 1.07571, 1.0814, 1.08036, 1.07899, 1.07766, 1.08828, 1.08763, 1.0902, 1.09315, 1.09343, 1.09283, 1.09481, 1.09464, 1.08796, 1.0869, 1.08355, 1.08881, 1.08039, 1.08039},
            {1.0992, 1.09896, 1.09463, 1.09348, 1.06633, 1.07312, 1.06374, 1.06964, 1.06907, 1.07093, 1.06818, 1.07457, 1.0739, 1.0802, 1.08101, 1.0853, 1.0854, 1.08418, 1.08682, 1.08651, 1.08702, 1.08155, 1.08121, 1.07055, 1.07055},
            {1.09685, 1.09, 1.08055, 1.08008, 1.06773, 1.06719, 1.06115, 1.061, 1.06107, 1.06057, 1.06306, 1.06856, 1.07106, 1.07443, 1.08278, 1.07793, 1.08099, 1.08409, 1.08771, 1.08292, 1.08012, 1.08178, 1.08071, 1.06701, 1.11109},
            {1.08057, 1.07783, 1.07816, 1.06267, 1.05554, 1.05773, 1.04958, 1.05704, 1.05901, 1.05433, 1.06156, 1.06724, 1.05897, 1.06819, 1.07249, 1.07357, 1.07588, 1.07812, 1.07851, 1.07938, 1.08024, 1.07814, 1.07587, 1.07492, 1.06742},
            {1.08031, 1.08041, 1.07713, 1.06364, 1.05367, 1.05163, 1.04413, 1.0555, 1.05325, 1.04969, 1.06036, 1.0575, 1.05894, 1.06192, 1.07007, 1.06966, 1.07184, 1.07222, 1.07666, 1.07605, 1.07457, 1.07601, 1.07338, 1.07071, 1.0633},
            {1.08318, 1.07322, 1.06613, 1.05857, 1.05195, 1.0543, 1.04771, 1.04132, 1.05283, 1.05315, 1.05121, 1.05265, 1.05287, 1.06137, 1.05975, 1.06412, 1.06353, 1.06727, 1.06623, 1.06722, 1.06576, 1.06554, 1.06452, 1.05893, 1.0552},
            {1.07879, 1.06603, 1.07071, 1.06235, 1.06011, 1.04944, 1.05266, 1.04673, 1.04501, 1.0502, 1.05238, 1.05151, 1.05452, 1.06179, 1.05834, 1.06007, 1.06779, 1.06757, 1.0693, 1.06735, 1.07078, 1.06685, 1.06735, 1.06402, 1.05736},
            {1.07923, 1.07505, 1.06102, 1.06411, 1.05856, 1.04875, 1.05091, 1.05235, 1.0504, 1.05975, 1.05677, 1.05734, 1.05959, 1.05989, 1.06563, 1.07021, 1.06983, 1.0708, 1.07165, 1.07009, 1.07007, 1.07008, 1.06821, 1.06472, 1.07223},
            {1.08041, 1.07622, 1.06381, 1.06583, 1.06088, 1.04094, 1.04897, 1.04879, 1.05467, 1.05488, 1.05768, 1.05811, 1.05787, 1.06217, 1.06337, 1.06226, 1.06368, 1.06701, 1.06514, 1.0676, 1.07016, 1.06747, 1.06414, 1.06539, 1.06419},
            {1.08939, 1.07325, 1.06308, 1.06292, 1.06363, 1.05635, 1.04607, 1.05271, 1.0516, 1.05073, 1.05094, 1.05554, 1.05857, 1.06114, 1.05985, 1.06084, 1.06525, 1.06953, 1.06838, 1.0686, 1.06651, 1.0678, 1.06552, 1.06661, 1.05895},
            {1.08421, 1.07047, 1.05988, 1.06476, 1.0624, 1.04674, 1.05259, 1.04876, 1.05641, 1.05487, 1.05319, 1.05642, 1.05481, 1.06062, 1.06141, 1.06475, 1.06413, 1.06821, 1.06957, 1.07073, 1.0709, 1.07101, 1.06924, 1.06494, 1.07047},
            {1.08451, 1.07733, 1.07417, 1.06674, 1.05775, 1.05014, 1.05445, 1.04965, 1.04604, 1.04945, 1.06185, 1.05478, 1.06183, 1.06187, 1.06488, 1.0635, 1.06654, 1.06916, 1.07183, 1.07191, 1.07214, 1.07, 1.06788, 1.06521, 1.05156},
            {1.08114, 1.06833, 1.07673, 1.06482, 1.06029, 1.05239, 1.05383, 1.0547, 1.05494, 1.05154, 1.05326, 1.05627, 1.0597, 1.05491, 1.0637, 1.06547, 1.06651, 1.0668, 1.07027, 1.07077, 1.06918, 1.06789, 1.0665, 1.06271, 1.05497},
            {1.08088, 1.06948, 1.06519, 1.05994, 1.0653, 1.05141, 1.04759, 1.05107, 1.04958, 1.05705, 1.05265, 1.05421, 1.05993, 1.05658, 1.06137, 1.06153, 1.06486, 1.0658, 1.06455, 1.06606, 1.0682, 1.06355, 1.06428, 1.0584, 1.05712},
            {1.0753, 1.07871, 1.07327, 1.05874, 1.05788, 1.05555, 1.0456, 1.04919, 1.05067, 1.04563, 1.05387, 1.05205, 1.05656, 1.05644, 1.05671, 1.06249, 1.06224, 1.06272, 1.06656, 1.06747, 1.06712, 1.06396, 1.06612, 1.06092, 1.06023},
            {1.08251, 1.07404, 1.06625, 1.05448, 1.04982, 1.05191, 1.04406, 1.05099, 1.04483, 1.04933, 1.04571, 1.05368, 1.0574, 1.05555, 1.05844, 1.06063, 1.06209, 1.06466, 1.06602, 1.06829, 1.0649, 1.06518, 1.06415, 1.05712, 1.06126},
            {1.08515, 1.07119, 1.06101, 1.06875, 1.05077, 1.0558, 1.0452, 1.05399, 1.04926, 1.04934, 1.046, 1.05325, 1.05499, 1.0551, 1.05623, 1.05961, 1.06396, 1.06375, 1.06803, 1.06746, 1.06695, 1.0647, 1.06238, 1.05966, 1.0559},
            {1.08142, 1.07629, 1.07029, 1.06857, 1.05966, 1.06115, 1.04692, 1.04899, 1.05486, 1.05292, 1.05551, 1.054, 1.05734, 1.05827, 1.0616, 1.06409, 1.06723, 1.06764, 1.06878, 1.06714, 1.07026, 1.06995, 1.067, 1.0645, 1.05786},
            {1.08167, 1.07218, 1.06537, 1.06055, 1.06428, 1.04769, 1.05581, 1.0457, 1.04795, 1.05738, 1.05376, 1.05693, 1.06016, 1.05702, 1.05952, 1.06521, 1.06851, 1.06608, 1.06878, 1.06993, 1.06964, 1.06944, 1.06702, 1.06268, 1.05528},
            {1.08553, 1.07509, 1.05872, 1.06727, 1.05207, 1.04901, 1.05222, 1.04676, 1.04954, 1.05679, 1.05346, 1.05025, 1.05742, 1.0586, 1.06086, 1.06381, 1.0658, 1.06594, 1.07008, 1.06955, 1.06806, 1.06779, 1.06857, 1.06206, 1.06257},
            {1.08764, 1.07696, 1.06226, 1.05582, 1.05379, 1.04833, 1.04854, 1.03913, 1.04649, 1.04794, 1.05171, 1.05084, 1.05388, 1.05859, 1.06108, 1.06413, 1.06856, 1.06808, 1.06695, 1.0698, 1.06949, 1.06747, 1.06778, 1.06834, 1.06162},
            {1.08237, 1.083, 1.0706, 1.06536, 1.05326, 1.04712, 1.04127, 1.04816, 1.05083, 1.04983, 1.05888, 1.05719, 1.05385, 1.05753, 1.06788, 1.06833, 1.06924, 1.07149, 1.07257, 1.07527, 1.07437, 1.07286, 1.07109, 1.07341, 1.06595},
            {1.09395, 1.08428, 1.07201, 1.06738, 1.05683, 1.05494, 1.05682, 1.05566, 1.05746, 1.05917, 1.06449, 1.06399, 1.06612, 1.0697, 1.06902, 1.07498, 1.079, 1.07951, 1.07973, 1.08238, 1.08118, 1.07821, 1.07762, 1.07838, 1.0748},
            {1.10099, 1.09039, 1.09071, 1.08542, 1.06614, 1.06294, 1.06868, 1.06066, 1.06788, 1.06673, 1.06555, 1.07318, 1.076, 1.07883, 1.08329, 1.08262, 1.08974, 1.08433, 1.08799, 1.08864, 1.09007, 1.08935, 1.08647, 1.08232, 1.08917},
            {1.11566, 1.11304, 1.10852, 1.10226, 1.08506, 1.0838, 1.07338, 1.07733, 1.07582, 1.07357, 1.08191, 1.08342, 1.08946, 1.08732, 1.09232, 1.09352, 1.09646, 1.09554, 1.0986, 1.09614, 1.09783, 1.09469, 1.09222, 1.08482, 1.07672},
            {1.12999, 1.1308, 1.11998, 1.11264, 1.10557, 1.09453, 1.09524, 1.09967, 1.0902, 1.09678, 1.09864, 1.10022, 1.10212, 1.10555, 1.10444, 1.10583, 1.11529, 1.11116, 1.10697, 1.11128, 1.10871, 1.10553, 1.10373, 1.10328, 1.08562},
            {1.14595, 1.14167, 1.13199, 1.12597, 1.11793, 1.11031, 1.11032, 1.11595, 1.10531, 1.10728, 1.11036, 1.11579, 1.11597, 1.12119, 1.12158, 1.12373, 1.11876, 1.12174, 1.11813, 1.11806, 1.1129, 1.11091, 1.1063, 1.09987, 1.10345},
            {1.16898, 1.16266, 1.15277, 1.15617, 1.13229, 1.12843, 1.12843, 1.13182, 1.11949, 1.12802, 1.13043, 1.12963, 1.12986, 1.13797, 1.13046, 1.13781, 1.1371, 1.13381, 1.12924, 1.13352, 1.12856, 1.12548, 1.11962, 1.11881, 1.10506},
            {1.18158, 1.17451, 1.15399, 1.15639, 1.13505, 1.13397, 1.12596, 1.13103, 1.13081, 1.13212, 1.13065, 1.12742, 1.13606, 1.13513, 1.13518, 1.13828, 1.13768, 1.13748, 1.13206, 1.12869, 1.12799, 1.12467, 1.12074, 1.11329, 1.1085},
            {1.17674, 1.16676, 1.17122, 1.14608, 1.14441, 1.14199, 1.1349, 1.13342, 1.13319, 1.12803, 1.1364, 1.13995, 1.14734, 1.14445, 1.15033, 1.15337, 1.1589, 1.15349, 1.14948, 1.15103, 1.14106, 1.13866, 1.13654, 1.12737, 1.13848},
            {1.17522, 1.1662, 1.16424, 1.15044, 1.14796, 1.13156, 1.12777, 1.12974, 1.12903, 1.13117, 1.12588, 1.12526, 1.1332, 1.13882, 1.14367, 1.14056, 1.13634, 1.13155, 1.12871, 1.11628, 1.10839, 1.1018, 1.09387, 1.08858, 1.08838},
            {1.16964, 1.15751, 1.155, 1.14562, 1.11584, 1.11556, 1.11613, 1.11129, 1.10059, 1.10454, 1.10932, 1.11208, 1.10981, 1.11533, 1.11146, 1.11233, 1.10833, 1.09882, 1.09658, 1.09356, 1.08074, 1.07514, 1.06795, 1.06639, 1.03923},
            {1.18097, 1.17144, 1.15092, 1.15058, 1.13067, 1.12884, 1.13523, 1.11665, 1.11124, 1.12304, 1.11463, 1.12182, 1.12285, 1.12402, 1.12244, 1.11793, 1.11585, 1.10909, 1.09855, 1.09832, 1.08755, 1.0792, 1.07639, 1.06861, 1.11578},
            {1.18546, 1.17671, 1.17893, 1.16612, 1.14488, 1.143, 1.14111, 1.13129, 1.13765, 1.13512, 1.13983, 1.14034, 1.1379, 1.13725, 1.13493, 1.13253, 1.12353, 1.11733, 1.1083, 1.10161, 1.09309, 1.08792, 1.07692, 1.06346, 1.11774},
            {1.18759, 1.18407, 1.17892, 1.16256, 1.1504, 1.1507, 1.14117, 1.13222, 1.13698, 1.13796, 1.14028, 1.13925, 1.13776, 1.13473, 1.12882, 1.12396, 1.11498, 1.10426, 1.09507, 1.08844, 1.07757, 1.07294, 1.06212, 1.06555, 1.06555},
            {1.19158, 1.18551, 1.1667, 1.16281, 1.15523, 1.14511, 1.13127, 1.13114, 1.13765, 1.13991, 1.13496, 1.12945, 1.13165, 1.12707, 1.12177, 1.11329, 1.10163, 1.08886, 1.0831, 1.07501, 1.0668, 1.05884, 1.05211, 1.05556, 1.05556},
            {1.18971, 1.1806, 1.17373, 1.15443, 1.14119, 1.13778, 1.13403, 1.12904, 1.12818, 1.13111, 1.12829, 1.12785, 1.12666, 1.1177, 1.10981, 1.10037, 1.09161, 1.08199, 1.07339, 1.0661, 1.06187, 1.0552, 1.05736, 1.04018, 1.04018},
            {1.21644, 1.20289, 1.18759, 1.17093, 1.14879, 1.13856, 1.13496, 1.13828, 1.13531, 1.13479, 1.1296, 1.1276, 1.11892, 1.11201, 1.10326, 1.09378, 1.08251, 1.07337, 1.06392, 1.05958, 1.05122, 1.04796, 1.04476, 1.04921, 1.04921},
            {1.30734, 1.27063, 1.24102, 1.20965, 1.16382, 1.166, 1.16335, 1.16172, 1.15341, 1.14216, 1.14074, 1.13158, 1.12004, 1.10908, 1.09443, 1.08286, 1.07002, 1.06178, 1.05279, 1.04638, 1.04197, 1.03788, 1.04552, 1.04552, 1.04552},
            {1.43544, 1.33744, 1.28384, 1.22859, 1.1842, 1.16492, 1.15349, 1.14864, 1.1442, 1.14128, 1.13707, 1.12628, 1.11528, 1.10241, 1.09264, 1.07147, 1.05804, 1.04773, 1.03989, 1.02467, 1.02297, 1.01809, 1.01809, 1.01809, 1.01809},
            {1.39317, 1.30409, 1.25312, 1.19909, 1.16376, 1.15719, 1.14871, 1.13893, 1.13792, 1.12856, 1.11708, 1.1084, 1.09669, 1.07676, 1.05995, 1.04589, 1.02666, 1.01233, 0.999963, 0.994319, 0.992028, 0.974902, 0.974902, 0.974902, 0.974902},
            {1.38219, 1.31789, 1.2791, 1.25072, 1.23751, 1.23292, 1.20946, 1.21833, 1.21211, 1.19738, 1.19609, 1.16634, 1.14902, 1.13148, 1.10066, 1.07876, 1.06261, 1.04117, 1.03154, 1.0128, 1.00621, 1.00621, 1.00621, 1.00621, 1.00621},
            {1.41808, 1.38259, 1.3557, 1.31769, 1.28539, 1.25505, 1.2472, 1.21782, 1.2205, 1.19743, 1.19264, 1.18416, 1.15674, 1.14437, 1.12914, 1.11866, 1.1052, 1.09288, 1.09089, 1.08717, 0.983473, 0.983473, 0.983473, 0.983473, 0.983473},
            {1.29984, 1.2769, 1.24435, 1.20841, 1.16989, 1.13432, 1.10396, 1.10156, 1.08198, 1.06546, 1.04579, 1.03034, 1.01383, 1.0145, 0.995408, 0.981059, 0.972826, 0.951883, 0.967561, 0.869989, 0.869989, 0.869989, 0.869989, 0.869989, 0.869989},
            {1.21327, 1.20083, 1.18955, 1.17354, 1.13406, 1.11806, 1.09531, 1.08534, 1.07328, 1.04981, 1.05247, 1.03417, 1.0203, 0.999248, 0.991849, 0.981384, 0.953769, 0.940712, 0.894954, 0.894954, 0.894954, 0.894954, 0.894954, 0.894954, 0.894954},
            {1.17107, 1.16502, 1.16614, 1.15611, 1.1226, 1.11733, 1.0901, 1.07221, 1.06382, 1.06758, 1.05419, 1.0388, 1.02565, 1.01897, 1.00792, 1.01883, 0.99943, 0.947709, 0.947709, 0.947709, 0.947709, 0.947709, 0.947709, 0.947709, 0.947709},
            {1.13161, 1.12868, 1.12816, 1.11932, 1.10599, 1.08306, 1.06805, 1.05933, 1.05108, 1.03657, 1.02953, 1.03, 1.02133, 1.00044, 0.993815, 0.98701, 0.98701, 0.98701, 0.98701, 0.98701, 0.98701, 0.98701, 0.98701, 0.98701, 0.98701},
            {1.12233, 1.12891, 1.13233, 1.11662, 1.10916, 1.08938, 1.06313, 1.0606, 1.05638, 1.0577, 1.04021, 1.02918, 1.03453, 0.999307, 1.00437, 1.00437, 1.00437, 1.00437, 1.00437, 1.00437, 1.00437, 1.00437, 1.00437, 1.00437, 1.00437},
            {1.13608, 1.13629, 1.12536, 1.12162, 1.10971, 1.08823, 1.08328, 1.07322, 1.0509, 1.05512, 1.05369, 1.06144, 1.01401, 1.04202, 1.04202, 1.04202, 1.04202, 1.04202, 1.04202, 1.04202, 1.04202, 1.04202, 1.04202, 1.04202, 1.04202},
            {1.15957, 1.16142, 1.15173, 1.13519, 1.12599, 1.1009, 1.09362, 1.08509, 1.07347, 1.07529, 1.07264, 1.02518, 1.0001, 1.0001, 1.0001, 1.0001, 1.0001, 1.0001, 1.0001, 1.0001, 1.0001, 1.0001, 1.0001, 1.0001, 1.0001},
            {1.2207, 1.2196, 1.22139, 1.19873, 1.18531, 1.16345, 1.15336, 1.14879, 1.13906, 1.11171, 1.11096, 1.11708, 1.11708, 1.11708, 1.11708, 1.11708, 1.11708, 1.11708, 1.11708, 1.11708, 1.11708, 1.11708, 1.11708, 1.11708, 1.11708},
            {1.36011, 1.35502, 1.34224, 1.33197, 1.30817, 1.26292, 1.2456, 1.2702, 1.22842, 1.18389, 1.18389, 1.18389, 1.18389, 1.18389, 1.18389, 1.18389, 1.18389, 1.18389, 1.18389, 1.18389, 1.18389, 1.18389, 1.18389, 1.18389, 1.18389},
            {1.70221, 1.70612, 1.71747, 1.70046, 1.66047, 1.58398, 1.57341, 1.561, 1.20178, 1.20178, 1.20178, 1.20178, 1.20178, 1.20178, 1.20178, 1.20178, 1.20178, 1.20178, 1.20178, 1.20178, 1.20178, 1.20178, 1.20178, 1.20178, 1.20178},
            {1.93715, 1.90545, 1.89138, 1.84204, 1.80766, 1.6724, 1.74633, 1.50775, 1.50775, 1.50775, 1.50775, 1.50775, 1.50775, 1.50775, 1.50775, 1.50775, 1.50775, 1.50775, 1.50775, 1.50775, 1.50775, 1.50775, 1.50775, 1.50775, 1.50775}
        };

        // L2L3Relative (RecoRaw/Gen)
        if ( iEta >= 0 && iEta < jetNEtaL2L3StdBins && iPt >= 0 && iPt < jetNPtBins ) {
            retVal = corrFactor[iEta][iPt];
        }
    } // else if ( (fIsMc && fIsPbGoing) || (!fIsMc && !fIsPbGoing) )

    if ( fVerbose ) {
        std::cout << Form("eta range: %f - %f, pT range: %f - %f \t", jetEtaL2L3StdVals[iEta], jetEtaL2L3StdVals[iEta+1], jetPtVals[iPt], jetPtVals[iPt+1]);
        std::cout << Form("iEta = %d, iPt = %d, retVal = %f\n", iEta, iPt, retVal);
        std::cout << "ForestAODReader::jecManualCorrection - end" << std::endl;
    }
    
    return retVal;
}

//_________________
void ForestAODReader::clearVariables() {
    if ( fVerbose ) {
        std::cout << "ForestAODReader::clearVariables " << std::endl;
    }
    fRunId = {0};
    fEventId = {0};
    fLumi = {0};
    fVertexZ = {-999.f};
    fHiBin = {-1};
    fPtHatWeight = {-1.f};
    fPtHat = {-1.f};

    // bad jets and multiplicity to be added

    fNRecoJets = {0};
    fNGenJets = {0};
    fNTracks = {0};

    fHLT_HIAK4CaloJet60_v1 = {0};
    fHLT_HIAK4CaloJet80_v1 = {0};
    fHLT_PAAK4CaloJet60_Eta5p1_v3 = {0};
    fHLT_PAAK4CaloJet80_Eta5p1_v3 = {0};
    fHLT_PAAK4CaloJet100_Eta5p1_v3 = {0};
    fHLT_PAAK4PFJet60_Eta5p1_v4 = {0};
    fHLT_PAAK4PFJet80_Eta5p1_v3 = {0};
    fHLT_PAAK4PFJet100_Eta5p1_v3 = {0};
    fHLT_PAAK4PFJet120_Eta5p1_v2 = {0};

    fHLT_HIAK4PFJet15_v1 = {0};
    fHLT_HIAK4PFJet15_v1_Prescl = {0};
    fHLT_HIAK4PFJet30_v1 = {0};
    fHLT_HIAK4PFJet30_v1_Prescl = {0};
    fHLT_HIAK4PFJet40_v1 = {0};
    fHLT_HIAK4PFJet40_v1_Prescl = {0};
    fHLT_HIAK4PFJet60_v1 = {0};
    fHLT_HIAK4PFJet60_v1_Prescl = {0};
    fHLT_HIAK4PFJet80_v1 = {0};
    fHLT_HIAK4PFJet80_v1_Prescl = {0};
    fHLT_HIAK4PFJet120_v1 = {0};
    fHLT_HIAK4PFJet120_v1_Prescl = {0};

    fHLT_HIAK8PFJet15_v1 = {0};
    fHLT_HIAK8PFJet15_v1_Prescl = {0};
    fHLT_HIAK8PFJet25_v1 = {0};
    fHLT_HIAK8PFJet25_v1_Prescl = {0};
    fHLT_HIAK8PFJet40_v1 = {0};
    fHLT_HIAK8PFJet40_v1_Prescl = {0};
    fHLT_HIAK8PFJet60_v1 = {0};
    fHLT_HIAK8PFJet60_v1_Prescl = {0};
    fHLT_HIAK8PFJet80_v1 = {0};
    fHLT_HIAK8PFJet80_v1_Prescl = {0};
    fHLT_HIAK8PFJet140_v1 = {0};
    fHLT_HIAK8PFJet140_v1_Prescl = {0};

    fHLT_HIPFJet25_v1 = {0};
    fHLT_HIPFJet25_v1_Prescl = {0};
    fHLT_HIPFJet140_v1 = {0};
    fHLT_HIPFJet140_v1_Prescl = {0};

    fHLT_HIPuAK4CaloJet80Eta5p1_v1 = {0};
    fHLT_HIPuAK4CaloJet100Eta5p1_v1 = {0};

    fHBHENoiseFilterResultRun2Loose = {0};
    fHBHENoiseFilterResultRun2Tight = {0};
    fHBHEIsoNoiseFilterResult = {0};
    fCollisionEventSelectionAODv2 = {0};
    fPhfCoincFilter2Th4 = {0};
    fPPAprimaryVertexFilter = {0};
    fPBeamScrapingFilter = {0};
    fPprimaryVertexFilter = {0};
    fPVertexFilterCutG = {0};
    fPVertexFilterCutGloose = {0};
    fPVertexFilterCutGtight = {0};
    fPVertexFilterCutE = {0};
    fPVertexFilterCutEandG = {0};
    fPClusterCompatibilityFilter = {0};

    fPhfCoincFilter = {0};
    fPVertexFilterCutdz1p0 = {0};
    fPVertexFilterCutGplus = {0};
    fPVertexFilterCutVtx1 = {0};

    // Loop over jets and tracks
    for (short i{0}; i<20000; i++) {

        // Jet variables
        if (i<10000) {
            fRecoJetPt[i] = {0.f};
            fRecoJetEta[i] = {0.f};
            fRecoJetPhi[i] = {0.f};
            fRecoJetWTAEta[i] = {0.f};
            fRecoJetWTAPhi[i] = {0.f};
            fRecoJetTrackMax[i] = {0.f};
            fRefJetPt[i] = {0.f};
            fRefJetEta[i] = {0.f};
            fRefJetPhi[i] = {0.f};
            fRefJetWTAEta[i] = {0.f};
            fRefJetWTAPhi[i] = {0.f};
            fRefJetPartonFlavor[i] = {-999};
            fRefJetPartonFlavorForB[i] = {-99};
            fGenJetPt[i] = {0.f};
            fGenJetEta[i] = {0.f};
            fGenJetPhi[i] = {0.f};
            fGenJetWTAEta[i] = {0.f};
            fGenJetWTAPhi[i] = {0.f};
        } // if (i<100)

        // Track variables
        fTrackPt[i] = {0.f};
        fTrackEta[i] = {0.f};
        fTrackPhi[i] = {0.f};
        fTrackPtErr[i] = {0.f};
        fTrackDcaXY[i] = {0.f};
        fTrackDcaZ[i] = {0.f};
        fTrackDcaXYErr[i] = {0.f};
        fTrackDcaZErr[i] = {0.f};
        fTrackChi2[i] = {0.f};
        fTrackNDOF[i] = {0};
        fTrackPartFlowEcal[i] = {0.f};
        fTrackPartFlowHcal[i] = {0.f};
        fTrackMVA[i] = {0.f};
        fTrackAlgo[i] = {0};
        fTrackCharge[i] = {0};
        fTrackNHits[i] = {0};
        fTrackNLayers[i] = {0};
        fTrackHighPurity[i] = {false};
    } // for (short i{0}; i<9999; i++)

    fGenTrackPt.clear();
    fGenTrackEta.clear();
    fGenTrackPhi.clear();
    fGenTrackCharge.clear();
    fGenTrackPid.clear();
    fGenTrackSube.clear();

    if (fIsMc) {
        fRecoJet2GenJetId.clear();
        fGenJet2RecoJet.clear();
    }

    if ( fVerbose ) {
        std::cout << "\t[DONE]" << std::endl;
    }
}

//_________________
int ForestAODReader::init() {
    if ( fVerbose ) {
        std::cout << "ForestAODReader::init()" << std::endl;
    }
    int status = 0;
    // Setup chains to read
    status = setupChains();
    // Setup branches to read
    setupBranches();
    // Setup jet energy correction files and pointer
    setupJEC();
    // Setup jet energy uncertainty files and pointer
    setupJEU();
    if ( fIsMc ) {
        if ( TMath::Abs(fUseJERSystematics)<=1 ) {
            setJERSystParams();
        }
    }
    if ( fVerbose ) {
        std::cout << "ForestAODReader::init() is finished " << std::endl;
    }
    return status;
}

//________________
void ForestAODReader::setupJEC() {

    if ( fVerbose ) {
        std::cout << "ForestAODReader::setupJEC()" << std::endl;
    }

    // If no path to the aux_file
    if ( fJECPath.Length() <= 0 ) {
        // Set default values
        std::cout << "[WARNING] Default path to JEC files will be used" << std::endl;
        setPath2JetAnalysis();
    }

    if ( fJECFiles.empty() ) {
        std::cout << "[WARNING] Default JEC file with parameters will be used" << std::endl;
        addJECFile();
    }

    // Need to add path in front of the file name
    std::vector< std::string > tmp;
    for (unsigned int i{0}; i<fJECFiles.size(); i++) {
        tmp.push_back( Form( "%s/aux_files/%s_%i/JEC/%s", 
                             fJECPath.Data(), fCollidingSystem.Data(),
                             fCollidingEnergyGeV, fJECFiles.at(i).c_str() ) );
    }
        
    fJECFiles.clear();
    fJECFiles = tmp;

    std::cout << "JEC files added: " << std::endl;
    for (unsigned int i{0}; i<fJECFiles.size(); i++) {
        std::cout << i << fJECFiles.at(i) << std::endl;
    }
	
	fJEC = new JetCorrector( fJECFiles );

    if ( fUseExtraJECforAk4Cs ) {
        createExtraJECScaleCorrFunction();
    }

    if ( fVerbose ) {
        std::cout << "\t[DONE]" << std::endl;
    }
}

//________________
void ForestAODReader::setupJEU() {

    if ( fVerbose ) {
        std::cout << "ForestAODReader::setupJEU()" << std::endl;
    }

    // Next part is needed only if JEU correction is applied
    if ( fUseJEU == 0) return;

    // If no path to the aux_file
    if ( fJECPath.Length() <= 0 ) {
        // Set default values
        std::cout << "[WARNING] Default path to JEU files will be used" << std::endl;
        setPath2JetAnalysis();
    }

    // If no correction file is specified
    if ( fJEUInputFileName.Length() <= 0 ) {
        std::cout << "[WARNING] Default JEU file with parameters will be used" << std::endl;
        setJEUFileName();
    }

    TString tmp = Form( "%s/aux_files/%s_%i/JEC/%s", 
                        fJECPath.Data(), fCollidingSystem.Data(),
                        fCollidingEnergyGeV, fJEUInputFileName.Data() );
    fJEUInputFileName = tmp;

    fJEU = new JetUncertainty( fJEUInputFileName.Data() );
    std::cout << "JEU file: " << fJEUInputFileName.Data() << std::endl;

    if ( fVerbose ) {
        std::cout << "\t[DONE]" << std::endl;
    }   
}

//________________
void ForestAODReader::createExtraJECScaleCorrFunction() {
    fJECScaleCorr = new TF1("JetScaleCorrection","[3] + ([0]-[3]) / ( 1.0 + pow( x/[2],[1] ) )", 30, 800);
    fJECScaleCorr->SetParameters(2.27008e+00, 9.18625e-01, 1.43067e+00, 1.00002e+00);
}

//________________
double ForestAODReader::evalCentralityWeight(const double& x) {
    double weight{1.};
    double p0{4.363352};
    double p1{-8.957467e-02};
    double p2{7.301890e-04};
    double p3{-2.885492e-06};
    double p4{4.741175e-09};
    double p5{0.};
    //double p5{-1.407975e-09};

    weight = p0 + p1 * x + p2 * TMath::Power(x, 2) +
             p3 * TMath::Power(x, 3) + p4 * TMath::Power(x, 4) +
             p5 * TMath::Power(x, 5);

    return weight;
}

//_________________
void ForestAODReader::finish() {
    // Nothing to do here
}

//_________________
int ForestAODReader::setupChains() {

    if ( fVerbose ) {
        std::cout << "ForestAODReader::setupChains()";
    }

    // Setup chains (0-good, 1-bad)
    int returnStatus = 1;

    // Setup chains to read

    std::cout << "Setting chains... ";

    // Use event branch
    fEventTree = new TChain("hiEvtAnalyzer/HiTree");

    // Use HLT branch
    if ( fUseHltBranch ) {
        fHltTree = new TChain("hltanalysis/HltTree");
    }
    // Use skimming branch
    if ( fUseSkimmingBranch ) {
        fSkimTree = new TChain("skimanalysis/HltTree");
    }
    // Use particle flow jet branch
    if ( fUseRecoJetBranch ) {
        fRecoJetTree = new TChain( Form( "%s/t", fRecoJetTreeName.Data() ) );
    }
    // Use reconstructed track branch
    if ( fUseTrackBranch ) {
        fTrkTree = new TChain("ppTrack/trackTree");
    }
    // Use generated track branch
    if ( fIsMc && fUseGenTrackBranch ) {
        fGenTrkTree = new TChain("HiGenParticleAna/hi");
    }
    std::cout << "\t[DONE]\n";

    // Initialize input file name (should switch to const char* processing later)
    TString input(fInFileName);

    // Check input exists
    if (  input.Length()<= 0 ) {
        std::cerr << "No normal inputfile. Terminating." << std::endl;
        returnStatus = 1;
        exit(0);
    }
    // Normail input
    else {
        // If input is a single ROOT file
        if ( input.Index(".root") > 0 ) {
            std::cout << Form( "Adding %s file to chains\n", input.Data() );
            fEventTree->Add( input.Data() );
            if ( fUseHltBranch ) fHltTree->Add( input.Data() );
            if ( fUseSkimmingBranch ) fSkimTree->Add( input.Data() );
            if ( fUseRecoJetBranch ) fRecoJetTree->Add( input.Data() );
            if ( fUseTrackBranch ) fTrkTree->Add( input.Data() );
            if ( fIsMc && fUseGenTrackBranch ) fGenTrkTree->Add( input.Data() );

            fEvents2Read = fEventTree->GetEntries();
            std::cout << Form("Total number of events to read: %lld\n", fEvents2Read );
            Long64_t fEvents2Read2 = fRecoJetTree->GetEntries();
            std::cout << Form("Total number of events to read2: %lld\n", fEvents2Read2 );
        }
        // Assuming that list of files is provided instead of a single file
        else {
            std::ifstream inputStream( input.Data() );

            if ( !inputStream ) std::cout << Form( "ERROR: Cannot open file list: %s\n", input.Data() );
            int nFiles = 0;
            std::string file;
            size_t pos;
            while ( getline( inputStream, file ) ) {
                // NOTE: our external formatters may pass "file NumEvents"
                //       Take only the first part
                //cout << "DEBUG found " <<  file << endl;
                pos = file.find_first_of(" ");
                if ( pos != std::string::npos ) file.erase( pos, file.length() - pos );
                //cout << "DEBUG found [" <<  file << "]" << endl;

                // Check that file is of a correct name
                if ( file.find(".root") != std::string::npos /* && file.find("Forest") != std::string::npos &&
                     file.find("AOD") != std::string::npos */ ) {
                    
                    // Open file
                    TFile* ftmp = TFile::Open(file.c_str());

                    // Check file is not zombie and contains information
                    if ( ftmp && !ftmp->IsZombie() && ftmp->GetNkeys() ) {
                        std::cout << Form("Adding file to chain: %s\n", file.c_str() );
                        // Adding file to chains
                        fEventTree->Add( file.c_str() );
                        if ( fUseHltBranch ) fHltTree->Add( file.c_str() );
                        if ( fUseSkimmingBranch ) fSkimTree->Add( file.c_str() );
                        if ( fUseRecoJetBranch ) fRecoJetTree->Add( file.c_str() );
                        if ( fUseTrackBranch ) fTrkTree->Add( file.c_str() );
                        if ( fIsMc && fUseGenTrackBranch ) fGenTrkTree->Add( file.c_str() );
                        ++nFiles;
                    } //if(ftmp && !ftmp->IsZombie() && ftmp->GetNkeys())

                    if (ftmp) {
                        ftmp->Close();
                    } //if (ftmp)
                } //if ( file.find(".root") != std::string::npos && file.find("Forest") != std::string::npos && file.find("AOD") != std::string::npos )
            } //while ( getline( inputStream, file ) )

            std::cout << Form("Total number of files in chain: %d\n", nFiles);
            fEvents2Read = fEventTree->GetEntries();
            std::cout << Form("Total number of events to read: %lld\n", fEvents2Read );
        } // else {   if file list
        returnStatus = 0;
    } // else {   if normal input

    if ( fVerbose ) {
        std::cout << "\t[DONE]" << std::endl;
    }
    return returnStatus;
}

//_________________
void ForestAODReader::setupBranches() {

    if ( fVerbose ) {
        std::cout << "ForestAODReader::setupChains()";
    }

    // Disable all branches - this is important while reading big files
    fEventTree->SetBranchStatus("*", 0);
    if ( fUseHltBranch ) fHltTree->SetBranchStatus("*", 0);
    if ( fUseSkimmingBranch ) fSkimTree->SetBranchStatus("*", 0);
    if ( fUseRecoJetBranch ) fRecoJetTree->SetBranchStatus("*", 0);
    if ( fUseTrackBranch ) fTrkTree->SetBranchStatus("*", 0);
    if ( fUseGenTrackBranch && fIsMc ) fGenTrkTree->SetBranchStatus("*", 0);


    // enable branches of interest -> see definition of each variables above

    // Event quantities
    fEventTree->SetBranchStatus("run", 1);
    fEventTree->SetBranchStatus("evt", 1);
    fEventTree->SetBranchStatus("lumi", 1);
    fEventTree->SetBranchStatus("vz", 1);
    fEventTree->SetBranchStatus("hiBin", 1); //centrality only for PbPb and XeXe
    fEventTree->SetBranchAddress("run", &fRunId);
    fEventTree->SetBranchAddress("evt", &fEventId);
    fEventTree->SetBranchAddress("lumi", &fLumi);
    fEventTree->SetBranchAddress("vz", &fVertexZ);
    fEventTree->SetBranchAddress("hiBin", &fHiBin); 

    if( fIsMc ) {
        fEventTree->SetBranchStatus("weight", 1);
        fEventTree->SetBranchStatus("pthat", 1); 
        fEventTree->SetBranchAddress("weight", &fPtHatWeight);
        fEventTree->SetBranchAddress("pthat", &fPtHat);
    }

    if ( fUseHltBranch ) {

        // Status
        fHltTree->SetBranchStatus("HLT_HIAK4CaloJet60_v1", 1);
        fHltTree->SetBranchStatus("HLT_HIAK4CaloJet80_v1", 1);
        fHltTree->SetBranchStatus("HLT_PAAK4CaloJet60_Eta5p1_v3", 1);
        fHltTree->SetBranchStatus("HLT_PAAK4CaloJet80_Eta5p1_v3", 1);
        fHltTree->SetBranchStatus("HLT_PAAK4CaloJet100_Eta5p1_v3", 1);
        fHltTree->SetBranchStatus("HLT_PAAK4PFJet60_Eta5p1_v4", 1);
        fHltTree->SetBranchStatus("HLT_PAAK4PFJet80_Eta5p1_v3", 1);
        fHltTree->SetBranchStatus("HLT_PAAK4PFJet100_Eta5p1_v3", 1);
        fHltTree->SetBranchStatus("HLT_PAAK4PFJet120_Eta5p1_v2", 1);

        fHltTree->SetBranchStatus("HLT_HIAK4PFJet15_v1", 1);
        fHltTree->SetBranchStatus("HLT_HIAK4PFJet15_v1_Prescl", 1);
        fHltTree->SetBranchStatus("HLT_HIAK4PFJet30_v1", 1);
        fHltTree->SetBranchStatus("HLT_HIAK4PFJet30_v1_Prescl", 1);
        fHltTree->SetBranchStatus("HLT_HIAK4PFJet40_v1", 1);
        fHltTree->SetBranchStatus("HLT_HIAK4PFJet40_v1_Prescl", 1);
        fHltTree->SetBranchStatus("HLT_HIAK4PFJet60_v1", 1);
        fHltTree->SetBranchStatus("HLT_HIAK4PFJet60_v1_Prescl", 1);
        fHltTree->SetBranchStatus("HLT_HIAK4PFJet80_v1", 1);
        fHltTree->SetBranchStatus("HLT_HIAK4PFJet80_v1_Prescl", 1);
        fHltTree->SetBranchStatus("HLT_HIAK4PFJet120_v1", 1);
        fHltTree->SetBranchStatus("HLT_HIAK4PFJet120_v1_Prescl", 1);

        fHltTree->SetBranchStatus("HLT_HIAK8PFJet15_v1", 1);
        fHltTree->SetBranchStatus("HLT_HIAK8PFJet15_v1_Prescl", 1);
        fHltTree->SetBranchStatus("HLT_HIAK8PFJet25_v1", 1);
        fHltTree->SetBranchStatus("HLT_HIAK8PFJet25_v1_Prescl", 1);
        fHltTree->SetBranchStatus("HLT_HIAK8PFJet40_v1", 1);
        fHltTree->SetBranchStatus("HLT_HIAK8PFJet40_v1_Prescl", 1);
        fHltTree->SetBranchStatus("HLT_HIAK8PFJet60_v1", 1);
        fHltTree->SetBranchStatus("HLT_HIAK8PFJet60_v1_Prescl", 1);
        fHltTree->SetBranchStatus("HLT_HIAK8PFJet80_v1", 1);
        fHltTree->SetBranchStatus("HLT_HIAK8PFJet80_v1_Prescl", 1);
        fHltTree->SetBranchStatus("HLT_HIAK8PFJet140_v1", 1);
        fHltTree->SetBranchStatus("HLT_HIAK8PFJet140_v1_Prescl", 1);

        fHltTree->SetBranchStatus("HLT_HIPFJet25_v1", 1);
        fHltTree->SetBranchStatus("HLT_HIPFJet25_v1_Prescl", 1);
        fHltTree->SetBranchStatus("HLT_HIPFJet140_v1", 1);
        fHltTree->SetBranchStatus("HLT_HIPFJet140_v1_Prescl", 1);

        fHltTree->SetBranchStatus("HLT_HIPuAK4CaloJet80Eta5p1_v1", 1);
        fHltTree->SetBranchStatus("HLT_HIPuAK4CaloJet100Eta5p1_v1", 1);

        // Address
        fHltTree->SetBranchAddress("HLT_HIAK4CaloJet60_v1", &fHLT_HIAK4CaloJet60_v1);
        fHltTree->SetBranchAddress("HLT_HIAK4CaloJet80_v1", &fHLT_HIAK4CaloJet80_v1);
        fHltTree->SetBranchAddress("HLT_PAAK4CaloJet60_Eta5p1_v3", &fHLT_PAAK4CaloJet60_Eta5p1_v3);
        fHltTree->SetBranchAddress("HLT_PAAK4CaloJet80_Eta5p1_v3", &fHLT_PAAK4CaloJet80_Eta5p1_v3);
        fHltTree->SetBranchAddress("HLT_PAAK4CaloJet100_Eta5p1_v3", &fHLT_PAAK4CaloJet100_Eta5p1_v3);
        fHltTree->SetBranchAddress("HLT_PAAK4PFJet60_Eta5p1_v4", &fHLT_PAAK4PFJet60_Eta5p1_v4);
        fHltTree->SetBranchAddress("HLT_PAAK4PFJet80_Eta5p1_v3", &fHLT_PAAK4PFJet80_Eta5p1_v3);
        fHltTree->SetBranchAddress("HLT_PAAK4PFJet100_Eta5p1_v3", &fHLT_PAAK4PFJet100_Eta5p1_v3);
        fHltTree->SetBranchAddress("HLT_PAAK4PFJet120_Eta5p1_v2", &fHLT_PAAK4PFJet120_Eta5p1_v2);

        fHltTree->SetBranchAddress("HLT_HIAK4PFJet15_v1", &fHLT_HIAK4PFJet15_v1);
        fHltTree->SetBranchAddress("HLT_HIAK4PFJet15_v1_Prescl", &fHLT_HIAK4PFJet15_v1_Prescl);
        fHltTree->SetBranchAddress("HLT_HIAK4PFJet30_v1", &fHLT_HIAK4PFJet30_v1);
        fHltTree->SetBranchAddress("HLT_HIAK4PFJet30_v1_Prescl", &fHLT_HIAK4PFJet30_v1_Prescl);
        fHltTree->SetBranchAddress("HLT_HIAK4PFJet40_v1", &fHLT_HIAK4PFJet40_v1);
        fHltTree->SetBranchAddress("HLT_HIAK4PFJet40_v1_Prescl", &fHLT_HIAK4PFJet40_v1_Prescl);
        fHltTree->SetBranchAddress("HLT_HIAK4PFJet60_v1", &fHLT_HIAK4PFJet60_v1);
        fHltTree->SetBranchAddress("HLT_HIAK4PFJet60_v1_Prescl", &fHLT_HIAK4PFJet60_v1_Prescl);
        fHltTree->SetBranchAddress("HLT_HIAK4PFJet80_v1", &fHLT_HIAK4PFJet80_v1);
        fHltTree->SetBranchAddress("HLT_HIAK4PFJet80_v1_Prescl", &fHLT_HIAK4PFJet80_v1_Prescl);
        fHltTree->SetBranchAddress("HLT_HIAK4PFJet120_v1", &fHLT_HIAK4PFJet120_v1);
        fHltTree->SetBranchAddress("HLT_HIAK4PFJet120_v1_Prescl", &fHLT_HIAK4PFJet120_v1_Prescl);

        fHltTree->SetBranchAddress("HLT_HIAK8PFJet15_v1", &fHLT_HIAK8PFJet15_v1);
        fHltTree->SetBranchAddress("HLT_HIAK8PFJet15_v1_Prescl", &fHLT_HIAK8PFJet15_v1_Prescl);
        fHltTree->SetBranchAddress("HLT_HIAK8PFJet25_v1", &fHLT_HIAK8PFJet25_v1);
        fHltTree->SetBranchAddress("HLT_HIAK8PFJet25_v1_Prescl", &fHLT_HIAK8PFJet25_v1_Prescl);
        fHltTree->SetBranchAddress("HLT_HIAK8PFJet40_v1", &fHLT_HIAK8PFJet40_v1);
        fHltTree->SetBranchAddress("HLT_HIAK8PFJet40_v1_Prescl", &fHLT_HIAK8PFJet40_v1_Prescl);
        fHltTree->SetBranchAddress("HLT_HIAK8PFJet60_v1", &fHLT_HIAK8PFJet60_v1);
        fHltTree->SetBranchAddress("HLT_HIAK8PFJet60_v1_Prescl", &fHLT_HIAK8PFJet60_v1_Prescl);
        fHltTree->SetBranchAddress("HLT_HIAK8PFJet80_v1", &fHLT_HIAK8PFJet80_v1);
        fHltTree->SetBranchAddress("HLT_HIAK8PFJet80_v1_Prescl", &fHLT_HIAK8PFJet80_v1_Prescl);
        fHltTree->SetBranchAddress("HLT_HIAK8PFJet140_v1", &fHLT_HIAK8PFJet140_v1);
        fHltTree->SetBranchAddress("HLT_HIAK8PFJet140_v1_Prescl", &fHLT_HIAK8PFJet140_v1_Prescl);

        fHltTree->SetBranchAddress("HLT_HIPFJet25_v1", &fHLT_HIPFJet25_v1);
        fHltTree->SetBranchAddress("HLT_HIPFJet25_v1_Prescl", &fHLT_HIPFJet25_v1_Prescl);
        fHltTree->SetBranchAddress("HLT_HIPFJet140_v1", &fHLT_HIPFJet140_v1);
        fHltTree->SetBranchAddress("HLT_HIPFJet140_v1_Prescl", &fHLT_HIPFJet140_v1_Prescl);

        fHltTree->SetBranchAddress("HLT_HIPuAK4CaloJet80Eta5p1_v1", &fHLT_HIPuAK4CaloJet80Eta5p1_v1);
        fHltTree->SetBranchAddress("HLT_HIPuAK4CaloJet100Eta5p1_v1", &fHLT_HIPuAK4CaloJet100Eta5p1_v1);
    } // if ( fUseHltBranch )

    // Skimming quantities
    if ( fUseSkimmingBranch ) {
        // Status
        fSkimTree->SetBranchStatus("HBHENoiseFilterResultRun2Loose", 1);
        fSkimTree->SetBranchStatus("HBHENoiseFilterResultRun2Tight", 1);
        fSkimTree->SetBranchStatus("HBHEIsoNoiseFilterResult", 1);
        fSkimTree->SetBranchStatus("collisionEventSelectionAODv2", 1);
        fSkimTree->SetBranchStatus("phfCoincFilter2Th4", 1);
        fSkimTree->SetBranchStatus("pPAprimaryVertexFilter", 1);
        fSkimTree->SetBranchStatus("pBeamScrapingFilter", 1);
        fSkimTree->SetBranchStatus("pprimaryVertexFilter", 1);
        fSkimTree->SetBranchStatus("pVertexFilterCutG", 1);
        fSkimTree->SetBranchStatus("pVertexFilterCutGloose", 1);
        fSkimTree->SetBranchStatus("pVertexFilterCutGtight", 1);
        fSkimTree->SetBranchStatus("pVertexFilterCutE", 1);
        fSkimTree->SetBranchStatus("pVertexFilterCutEandG", 1);
        fSkimTree->SetBranchStatus("pclusterCompatibilityFilter", 1);

        fSkimTree->SetBranchStatus("phfCoincFilter", 1);
        fSkimTree->SetBranchStatus("pVertexFilterCutdz1p0", 1);
        fSkimTree->SetBranchStatus("pVertexFilterCutGplus", 1);
        fSkimTree->SetBranchStatus("pVertexFilterCutVtx1", 1);


        // Address
        fSkimTree->SetBranchAddress("HBHENoiseFilterResultRun2Loose", &fHBHENoiseFilterResultRun2Loose);
        fSkimTree->SetBranchAddress("HBHENoiseFilterResultRun2Tight", &fHBHENoiseFilterResultRun2Tight);
        fSkimTree->SetBranchAddress("HBHEIsoNoiseFilterResult", &fHBHEIsoNoiseFilterResult);
        fSkimTree->SetBranchAddress("collisionEventSelectionAODv2", &fCollisionEventSelectionAODv2);
        fSkimTree->SetBranchAddress("phfCoincFilter2Th4", &fPhfCoincFilter2Th4);
        fSkimTree->SetBranchAddress("pPAprimaryVertexFilter", &fPPAprimaryVertexFilter);
        fSkimTree->SetBranchAddress("pBeamScrapingFilter", &fPBeamScrapingFilter);
        fSkimTree->SetBranchAddress("pprimaryVertexFilter", &fPprimaryVertexFilter);
        fSkimTree->SetBranchAddress("pVertexFilterCutG", &fPVertexFilterCutG);
        fSkimTree->SetBranchAddress("pVertexFilterCutGloose", &fPVertexFilterCutGloose);
        fSkimTree->SetBranchAddress("pVertexFilterCutGtight", &fPVertexFilterCutGtight);
        fSkimTree->SetBranchAddress("pVertexFilterCutE", &fPVertexFilterCutE);
        fSkimTree->SetBranchAddress("pVertexFilterCutEandG", &fPVertexFilterCutEandG);
        fSkimTree->SetBranchAddress("pclusterCompatibilityFilter", &fPClusterCompatibilityFilter);

        fSkimTree->SetBranchAddress("phfCoincFilter", &fPhfCoincFilter);
        fSkimTree->SetBranchAddress("pVertexFilterCutdz1p0", &fPVertexFilterCutdz1p0);
        fSkimTree->SetBranchAddress("pVertexFilterCutGplus", &fPVertexFilterCutGplus);
        fSkimTree->SetBranchAddress("pVertexFilterCutVtx1", &fPVertexFilterCutVtx1);
    } // if ( fUseSkimmingBranch )

    // Jet quantities
    if ( fUseRecoJetBranch ) {

        fRecoJetTree->SetBranchStatus("nref", 1);
        fRecoJetTree->SetBranchStatus("rawpt", 1);
        fRecoJetTree->SetBranchStatus("trackMax", 1);
        fRecoJetTree->SetBranchStatus("jteta", 1);
        fRecoJetTree->SetBranchStatus("jtphi", 1);
        fRecoJetTree->SetBranchStatus("WTAeta", 1);
        fRecoJetTree->SetBranchStatus("WTAphi", 1);

        fRecoJetTree->SetBranchAddress("nref", &fNRecoJets);
        fRecoJetTree->SetBranchAddress("rawpt", &fRecoJetPt);
        fRecoJetTree->SetBranchAddress("trackMax", &fRecoJetTrackMax);
        fRecoJetTree->SetBranchAddress("jteta", &fRecoJetEta);
        fRecoJetTree->SetBranchAddress("jtphi", &fRecoJetPhi);
        fRecoJetTree->SetBranchAddress("WTAeta", &fRecoJetWTAEta);
        fRecoJetTree->SetBranchAddress("WTAphi", &fRecoJetWTAPhi);

        fRecoJetTree->SetBranchStatus("jtPfNHF", 1);
        fRecoJetTree->SetBranchStatus("jtPfNEF", 1);
        fRecoJetTree->SetBranchStatus("jtPfCHF", 1);
        fRecoJetTree->SetBranchStatus("jtPfMUF", 1);
        fRecoJetTree->SetBranchStatus("jtPfCEF", 1);
        fRecoJetTree->SetBranchStatus("jtPfCHM", 1);
        fRecoJetTree->SetBranchStatus("jtPfCEM", 1);
        fRecoJetTree->SetBranchStatus("jtPfNHM", 1);
        fRecoJetTree->SetBranchStatus("jtPfNEM", 1);
        fRecoJetTree->SetBranchStatus("jtPfMUM", 1);

      	fRecoJetTree->SetBranchAddress("jtPfNHF", &fRecoJtPfNHF);    
 	    fRecoJetTree->SetBranchAddress("jtPfNEF", &fRecoJtPfNEF);
      	fRecoJetTree->SetBranchAddress("jtPfCHF", &fRecoJtPfCHF);
      	fRecoJetTree->SetBranchAddress("jtPfMUF", &fRecoJtPfMUF);
      	fRecoJetTree->SetBranchAddress("jtPfCEF", &fRecoJtPfCEF);
      	fRecoJetTree->SetBranchAddress("jtPfCHM", &fRecoJtPfCHM);
      	fRecoJetTree->SetBranchAddress("jtPfCEM", &fRecoJtPfCEM);
      	fRecoJetTree->SetBranchAddress("jtPfNHM", &fRecoJtPfNHM);
      	fRecoJetTree->SetBranchAddress("jtPfNEM", &fRecoJtPfNEM);
  	    fRecoJetTree->SetBranchAddress("jtPfMUM", &fRecoJtPfMUM);

        // Gen jet quantities
        if ( fIsMc ) {
            fRecoJetTree->SetBranchStatus("ngen", 1);
            fRecoJetTree->SetBranchStatus("genpt", 1);
            fRecoJetTree->SetBranchStatus("geneta", 1);
            fRecoJetTree->SetBranchStatus("genphi", 1);
            fRecoJetTree->SetBranchStatus("WTAgeneta", 1);
            fRecoJetTree->SetBranchStatus("WTAgenphi", 1);
            fRecoJetTree->SetBranchAddress("ngen", &fNGenJets);
            fRecoJetTree->SetBranchAddress("genpt", &fGenJetPt);
            fRecoJetTree->SetBranchAddress("geneta", &fGenJetEta);
            fRecoJetTree->SetBranchAddress("genphi", &fGenJetPhi);
            fRecoJetTree->SetBranchAddress("WTAgeneta", &fGenJetWTAEta);
            fRecoJetTree->SetBranchAddress("WTAgenphi", &fGenJetWTAPhi);
        }

        // Jet-matching quantities
        if ( fIsMc ) {
            fRecoJetTree->SetBranchStatus("refpt", 1);
            fRecoJetTree->SetBranchStatus("refeta", 1);
            fRecoJetTree->SetBranchStatus("refphi", 1);
            fRecoJetTree->SetBranchStatus("refWTAeta", 1);
            fRecoJetTree->SetBranchStatus("refWTAphi", 1);
            fRecoJetTree->SetBranchStatus("refparton_flavor", 1);
            fRecoJetTree->SetBranchStatus("refparton_flavorForB", 1);
            fRecoJetTree->SetBranchAddress("refpt", &fRefJetPt);
            fRecoJetTree->SetBranchAddress("refeta", &fRefJetEta);
            fRecoJetTree->SetBranchAddress("refphi", &fRefJetPhi);
            fRecoJetTree->SetBranchAddress("refWTAeta", &fRefJetWTAEta);
            fRecoJetTree->SetBranchAddress("refWTAphi", &fRefJetWTAPhi);
            fRecoJetTree->SetBranchAddress("refparton_flavor", &fRefJetPartonFlavor);
            fRecoJetTree->SetBranchAddress("refparton_flavorForB", &fRefJetPartonFlavorForB);
        }

    } // if ( fUseRecoJetBranch )

    // Track quantities
    if ( fUseTrackBranch ) {
        fTrkTree->SetBranchStatus("nTrk", 1);
        fTrkTree->SetBranchStatus("trkPt", 1);
        fTrkTree->SetBranchStatus("trkEta", 1);
        fTrkTree->SetBranchStatus("trkPhi", 1);
        fTrkTree->SetBranchStatus("trkPtError", 1);
        fTrkTree->SetBranchStatus("trkDxy1", 1);
        fTrkTree->SetBranchStatus("trkDxyError1", 1);
        fTrkTree->SetBranchStatus("trkDz1", 1);
        fTrkTree->SetBranchStatus("trkDzError1", 1);
        fTrkTree->SetBranchStatus("trkChi2", 1);
        fTrkTree->SetBranchStatus("trkNdof", 1);
        fTrkTree->SetBranchStatus("trkCharge", 1);
        fTrkTree->SetBranchStatus("trkNHit", 1);
        fTrkTree->SetBranchStatus("trkNlayer", 1);
        fTrkTree->SetBranchStatus("highPurity", 1);
        fTrkTree->SetBranchStatus("pfEcal", 1);
        fTrkTree->SetBranchStatus("pfHcal", 1);
        fTrkTree->SetBranchStatus("trkMVA", 1);
        fTrkTree->SetBranchStatus("trkAlgo", 1);

        fTrkTree->SetBranchAddress("nTrk", &fNTracks);
        fTrkTree->SetBranchAddress("trkPt", &fTrackPt);
        fTrkTree->SetBranchAddress("trkEta", &fTrackEta);
        fTrkTree->SetBranchAddress("trkPhi", &fTrackPhi);
        fTrkTree->SetBranchAddress("trkPtError", &fTrackPtErr);
        fTrkTree->SetBranchAddress("trkDxy1", &fTrackDcaXY);
        fTrkTree->SetBranchAddress("trkDxyError1", &fTrackDcaXYErr);
        fTrkTree->SetBranchAddress("trkDz1", &fTrackDcaZ);
        fTrkTree->SetBranchAddress("trkDzError1", &fTrackDcaZErr);
        fTrkTree->SetBranchAddress("trkChi2", &fTrackChi2);
        fTrkTree->SetBranchAddress("trkNdof", &fTrackNDOF);
        fTrkTree->SetBranchAddress("trkCharge", &fTrackCharge);
        fTrkTree->SetBranchAddress("trkNHit", &fTrackNHits);
        fTrkTree->SetBranchAddress("trkNlayer", &fTrackNLayers);
        fTrkTree->SetBranchAddress("highPurity", &fTrackHighPurity);
        fTrkTree->SetBranchAddress("pfEcal", &fTrackPartFlowEcal);
        fTrkTree->SetBranchAddress("pfHcal", &fTrackPartFlowHcal);
        fTrkTree->SetBranchAddress("trkMVA", &fTrackMVA);
        fTrkTree->SetBranchAddress("trkAlgo", &fTrackAlgo);
    } // if ( fUseTrackBranch ) 

    // Gen particle quantities
    if( fIsMc && fUseGenTrackBranch ) {
        fGenTrkTree->SetBranchStatus("pt", 1);
        fGenTrkTree->SetBranchStatus("eta", 1);
        fGenTrkTree->SetBranchStatus("phi", 1);
        fGenTrkTree->SetBranchStatus("chg", 1);
        fGenTrkTree->SetBranchStatus("pdg", 1);
        fGenTrkTree->SetBranchStatus("sube", 1);

        fGenTrkTree->SetBranchAddress("pt", &fGenTrackPt);
        fGenTrkTree->SetBranchAddress("eta", &fGenTrackEta);
        fGenTrkTree->SetBranchAddress("phi", &fGenTrackPhi);
        fGenTrkTree->SetBranchAddress("chg", &fGenTrackCharge);
        fGenTrkTree->SetBranchAddress("pdg", &fGenTrackPid);
        fGenTrkTree->SetBranchAddress("sube", &fGenTrackSube);
    }

    if ( fVerbose ) {
        std::cout << "\t[DONE]" << std::endl;
    }
}

//_________________
void ForestAODReader::report() {
    std::cout << "ForestAODReader::reporting" << std::endl;
}

//_________________
void ForestAODReader::readEvent() {

    if ( fVerbose ) {
        std::cout << "ForestAODReader::readEvent()\n";
    }

    if (fIsMc) {
        fRecoJet2GenJetId.clear();
        fGenJet2RecoJet.clear();
    }

    // Or one can call the clearVariables() function (will take more time)
    if (fUseGenTrackBranch && fIsMc) {
        fGenTrackPt.clear();
        fGenTrackEta.clear();
        fGenTrackPhi.clear();
        fGenTrackCharge.clear();
        fGenTrackPid.clear();
        fGenTrackSube.clear();
    }

    if ( fEventsProcessed >= fEvents2Read ) { 
        std::cerr << "ForestAODReader::readEvent() out of entry numbers\n"; 
        fReaderStatus = 2; // End of input stream
    }
    fEventTree->GetEntry( fEventsProcessed );
    if (fUseHltBranch) fHltTree->GetEntry(fEventsProcessed);
    if (fUseSkimmingBranch) fSkimTree->GetEntry(fEventsProcessed);
    if (fUseRecoJetBranch) fRecoJetTree->GetEntry(fEventsProcessed);
    if (fUseTrackBranch) fTrkTree->GetEntry(fEventsProcessed);
    if (fUseGenTrackBranch) fGenTrkTree->GetEntry(fEventsProcessed);
    fEventsProcessed++;

    if ( fVerbose ) {
        std::cout << "Events processed: " << fEventsProcessed << std::endl;
        std::cout << "ForestAODReader::readEvent() \t[DONE]" << std::endl;
    }
}

//________________
void ForestAODReader::fixIndices() {

    if ( fVerbose ) {
        std::cout << "ForestAODReader::fixIndices()\n";
    }

    if (fUseRecoJetBranch) {

        if ( fVerbose ) {
            std::cout << Form("Reco jets # %d Gen jets # %d\n", fNRecoJets, fNGenJets);
        }

        // Clear the vectors
        if ( !fRecoJet2GenJetId.empty() ) fRecoJet2GenJetId.clear();
        if ( !fGenJet2RecoJet.empty() ) fGenJet2RecoJet.clear();

        // Initialize the vectors with -1
        for (int iRecoJet{0}; iRecoJet<fNRecoJets; iRecoJet++) {
            fRecoJet2GenJetId.push_back(-1);
        }
        for (int iGenJet{0}; iGenJet<fNGenJets; iGenJet++) {
            fGenJet2RecoJet.push_back(-1);
        }

        // Loop over reconstructed jets
        for (int iRecoJet{0}; iRecoJet<fNRecoJets; iRecoJet++) {

            // Event must have gen jets
            if ( fNGenJets <= 0 )  break;

            // Must have a matched gen jet
            if ( fRefJetPt[iRecoJet] < 0) continue;

            // Matched gen jet cone radius
            float refEta = fRefJetEta[iRecoJet];
            float refPhi = fRefJetPhi[iRecoJet];
            float refPt = fRefJetPt[iRecoJet];

            // Loop over gen jets
            for (int iGenJet{0}; iGenJet<fNGenJets; iGenJet++) {

                //std::cout << "iGen: " << iGenJet << " genPt: " << fGenJetPt[iGenJet] << std::endl;
                float genEta = fGenJetEta[iGenJet];
                float genPhi = fGenJetPhi[iGenJet];
                float genPt = fGenJetPt[iGenJet];

                float dR = TMath::Sqrt(TMath::Power(genEta - refEta, 2) + TMath::Power(genPhi - refPhi, 2));
                float dPt = TMath::Abs(genPt - refPt);

                if ( fVerbose ) {
                    std::cout << Form("Reco/RefJet # %d GenJet # %d dR: %f dPt: %f dEta: %f matched: %s", iRecoJet, iGenJet, dR, dPt, genEta-refEta, (((dR < 0.1) && (TMath::Abs(genPt - refPt) < 0.1 )) ? "true" : "false" )) << std::endl;
                }
                
                if ( (dR < 0.1) && TMath::Abs(genPt - refPt) < 0.1 ) {
                    fRefJetEta[iRecoJet] = fGenJetEta[iGenJet];
                    fRefJetPhi[iRecoJet] = fGenJetPhi[iGenJet];
                    fRefJetWTAEta[iRecoJet] = fGenJetWTAEta[iGenJet];
                    fRefJetWTAPhi[iRecoJet] = fGenJetWTAPhi[iGenJet];
                    fRecoJet2GenJetId[iRecoJet] = iGenJet;  
                    fGenJet2RecoJet[iGenJet] = iRecoJet;
                    break;
                }
            } // for (int iGenJet{0}; iGenJet<fNGenJets; iGenJet++)

        } //for (int iRecoJet=0; iRecoJet<fNRecoJets; iRecoJet++)

        // // Fill the corresponding index in the reco vector and fill the gen
        // for (int iGenJet{0}; iGenJet<fNGenJets; iGenJet++) {
        //     std::vector<int>::iterator it=std::find(fRecoJet2GenJetId.begin(), fRecoJet2GenJetId.end(), iGenJet);
        //     if (it != fRecoJet2GenJetId.end()) {
        //         fGenJet2RecoJet.push_back( std::distance(fRecoJet2GenJetId.begin(), it) );
        //     }
        //     else {
        //         fGenJet2RecoJet.push_back(-1);
        //     }
        // }

        if ( fVerbose ) {
            std::cout << "Reco 2 Gen Jet Ids: ";
            for (int i{0}; i<fNRecoJets; i++) {
                std::cout << fRecoJet2GenJetId[i] << " ";
            }
            std::cout << std::endl;
            std::cout << "Gen 2 Reco Jet Ids: ";
            for (int i{0}; i<fNGenJets; i++) {
                std::cout << fGenJet2RecoJet[i] << " ";
            }
            std::cout << std::endl;
        }

    } // if (fUseRecoJetBranch)

    if ( fVerbose ) {
        std::cout << "\t[DONE]\n";
    }
}

//_________________
Event* ForestAODReader::returnEvent() {

    if ( fVerbose ) {
        std::cout << "ForestAODReader::returnEvent() - begin\n";
    }

    //std::cout << "ForestAODReader::returnEvent" << std::endl;
    readEvent();

    if ( fIsMc ) {
        fixIndices();
    }

    fEvent = new Event();

    // Remove UPC bins
    if ( fIsMc && fCorrectCentMC && fHiBin<10) {
        delete fEvent;
        fEvent = nullptr;
        return fEvent;
    }

    fEvent->setRunId( fRunId );
    fEvent->setEventId( fEventId );
    fEvent->setLumi( fLumi );
    fEvent->setVz( fVertexZ );
    float centW{1.f};
    if ( fIsMc && fCorrectCentMC) {
        // To handle centrality weight
        fEvent->setHiBin( fHiBin - 10 );
        centW = evalCentralityWeight( fHiBin - 10 );
    }
    else if ( fIsMc ) {
        fEvent->setHiBin( fHiBin );
    }
    else {
        fEvent->setHiBin( fHiBin );
    }
    fEvent->setCentralityWeight( centW );
    
    if ( fIsMc ) {
        fEvent->setPtHat( fPtHat );
        fEvent->setPtHatWeight( fPtHatWeight );
    }
    else {
        fEvent->setPtHat( 1. );
        fEvent->setPtHatWeight( 1. );        
    }

    // Fill HLT branch
    if ( fUseHltBranch ) {

        fEvent->trigAndSkim()->setHLT_HIAK4CaloJet60_v1(fHLT_HIAK4CaloJet60_v1);
        fEvent->trigAndSkim()->setHLT_HIAK4CaloJet80_v1(fHLT_HIAK4CaloJet80_v1);
        fEvent->trigAndSkim()->setHLT_PAAK4CaloJet60_Eta5p1_v3(fHLT_PAAK4CaloJet60_Eta5p1_v3);
        fEvent->trigAndSkim()->setHLT_PAAK4CaloJet80_Eta5p1_v3(fHLT_PAAK4CaloJet80_Eta5p1_v3);
        fEvent->trigAndSkim()->setHLT_PAAK4CaloJet100_Eta5p1_v3(fHLT_PAAK4CaloJet100_Eta5p1_v3);
        fEvent->trigAndSkim()->setHLT_PAAK4PFJet60_Eta5p1_v4(fHLT_PAAK4PFJet60_Eta5p1_v4);
        fEvent->trigAndSkim()->setHLT_PAAK4PFJet80_Eta5p1_v3(fHLT_PAAK4PFJet80_Eta5p1_v3);
        fEvent->trigAndSkim()->setHLT_PAAK4PFJet100_Eta5p1_v3(fHLT_PAAK4PFJet100_Eta5p1_v3);
        fEvent->trigAndSkim()->setHLT_PAAK4PFJet120_Eta5p1_v2(fHLT_PAAK4PFJet120_Eta5p1_v2);

        fEvent->trigAndSkim()->setHLT_HIAK4PFJet15_v1(fHLT_HIAK4PFJet15_v1);
        fEvent->trigAndSkim()->setHLT_HIAK4PFJet15_v1_Prescl(fHLT_HIAK4PFJet15_v1_Prescl);
        fEvent->trigAndSkim()->setHLT_HIAK4PFJet30_v1(fHLT_HIAK4PFJet30_v1);
        fEvent->trigAndSkim()->setHLT_HIAK4PFJet30_v1_Prescl(fHLT_HIAK4PFJet30_v1_Prescl);
        fEvent->trigAndSkim()->setHLT_HIAK4PFJet40_v1(fHLT_HIAK4PFJet40_v1);
        fEvent->trigAndSkim()->setHLT_HIAK4PFJet40_v1_Prescl(fHLT_HIAK4PFJet40_v1_Prescl);
        fEvent->trigAndSkim()->setHLT_HIAK4PFJet60_v1(fHLT_HIAK4PFJet60_v1);
        fEvent->trigAndSkim()->setHLT_HIAK4PFJet60_v1_Prescl(fHLT_HIAK4PFJet60_v1_Prescl);
        fEvent->trigAndSkim()->setHLT_HIAK4PFJet80_v1(fHLT_HIAK4PFJet80_v1);
        fEvent->trigAndSkim()->setHLT_HIAK4PFJet80_v1_Prescl(fHLT_HIAK4PFJet80_v1_Prescl);
        fEvent->trigAndSkim()->setHLT_HIAK4PFJet120_v1(fHLT_HIAK4PFJet120_v1);
        fEvent->trigAndSkim()->setHLT_HIAK4PFJet120_v1_Prescl(fHLT_HIAK4PFJet120_v1_Prescl);

        fEvent->trigAndSkim()->setHLT_HIAK8PFJet15_v1(fHLT_HIAK8PFJet15_v1);
        fEvent->trigAndSkim()->setHLT_HIAK8PFJet15_v1_Prescl(fHLT_HIAK8PFJet15_v1_Prescl);
        fEvent->trigAndSkim()->setHLT_HIAK8PFJet25_v1(fHLT_HIAK8PFJet25_v1);
        fEvent->trigAndSkim()->setHLT_HIAK8PFJet25_v1_Prescl(fHLT_HIAK8PFJet25_v1_Prescl);
        fEvent->trigAndSkim()->setHLT_HIAK8PFJet40_v1(fHLT_HIAK8PFJet40_v1);
        fEvent->trigAndSkim()->setHLT_HIAK8PFJet40_v1_Prescl(fHLT_HIAK8PFJet40_v1_Prescl);
        fEvent->trigAndSkim()->setHLT_HIAK8PFJet60_v1(fHLT_HIAK8PFJet60_v1);
        fEvent->trigAndSkim()->setHLT_HIAK8PFJet60_v1_Prescl(fHLT_HIAK8PFJet60_v1_Prescl);
        fEvent->trigAndSkim()->setHLT_HIAK8PFJet80_v1(fHLT_HIAK8PFJet80_v1);
        fEvent->trigAndSkim()->setHLT_HIAK8PFJet80_v1_Prescl(fHLT_HIAK8PFJet80_v1_Prescl);
        fEvent->trigAndSkim()->setHLT_HIAK8PFJet140_v1(fHLT_HIAK8PFJet140_v1);
        fEvent->trigAndSkim()->setHLT_HIAK8PFJet140_v1_Prescl(fHLT_HIAK8PFJet140_v1_Prescl);

        fEvent->trigAndSkim()->setHLT_HIPFJet25_v1(fHLT_HIPFJet25_v1);
        fEvent->trigAndSkim()->setHLT_HIPFJet25_v1_Prescl(fHLT_HIPFJet25_v1_Prescl);
        fEvent->trigAndSkim()->setHLT_HIPFJet140_v1(fHLT_HIPFJet140_v1);
        fEvent->trigAndSkim()->setHLT_HIPFJet140_v1_Prescl(fHLT_HIPFJet140_v1_Prescl);

        fEvent->trigAndSkim()->setHLT_HIPuAK4CaloJet80Eta5p1_v1(fHLT_HIPuAK4CaloJet80Eta5p1_v1);
        fEvent->trigAndSkim()->setHLT_HIPuAK4CaloJet100Eta5p1_v1(fHLT_HIPuAK4CaloJet100Eta5p1_v1);
    }

    // Fill skimming branch
    if ( fUseSkimmingBranch ) {
        fEvent->trigAndSkim()->setHBHENoiseFilterResultRun2Loose(fHBHENoiseFilterResultRun2Loose);
        fEvent->trigAndSkim()->setHBHENoiseFilterResultRun2Tight(fHBHENoiseFilterResultRun2Tight);
        fEvent->trigAndSkim()->setHBHEIsoNoiseFilterResult(fHBHEIsoNoiseFilterResult);
        fEvent->trigAndSkim()->setCollisionEventSelectionAODv2(fCollisionEventSelectionAODv2);
        fEvent->trigAndSkim()->setPhfCoincFilter2Th4(fPhfCoincFilter2Th4);
        fEvent->trigAndSkim()->setPPAprimaryVertexFilter(fPPAprimaryVertexFilter);
        fEvent->trigAndSkim()->setPBeamScrapingFilter(fPBeamScrapingFilter);
        fEvent->trigAndSkim()->setPprimaryVertexFilter(fPprimaryVertexFilter);
        fEvent->trigAndSkim()->setPVertexFilterCutG(fPVertexFilterCutG);
        fEvent->trigAndSkim()->setPVertexFilterCutGloose(fPVertexFilterCutGloose);
        fEvent->trigAndSkim()->setPVertexFilterCutGtight(fPVertexFilterCutGtight);
        fEvent->trigAndSkim()->setPVertexFilterCutE(fPVertexFilterCutE);
        fEvent->trigAndSkim()->setPVertexFilterCutEandG(fPVertexFilterCutEandG);
        fEvent->trigAndSkim()->setPClusterCompatibilityFilter(fPClusterCompatibilityFilter);

        fEvent->trigAndSkim()->setPhfCoincFilter(fPhfCoincFilter);
        fEvent->trigAndSkim()->setPVertexFilterCutdz1p0(fPVertexFilterCutdz1p0);
        fEvent->trigAndSkim()->setPVertexFilterCutGplus(fPVertexFilterCutGplus);
        fEvent->trigAndSkim()->setPVertexFilterCutVtx1(fPVertexFilterCutVtx1);
    }

    //fEvent->print();
    
    //
    // Create particle flow jet instances
    //
    if ( fUseRecoJetBranch ) {

        if ( fVerbose ) {
            std::cout << "Use PF branch \n";
        }

        // Loop over generated jets
        if ( fIsMc && !fEvent->isGenJetCollectionFilled() ) {

            if ( fVerbose ) {
                std::cout << "nGenRecoJets: " << fNGenJets << std::endl;
            }

            if ( fVerbose ) {
                std::cout << "Filling GenJets: " << fNGenJets << std::endl;
            }
            for (int iGenJet{0}; iGenJet<fNGenJets; iGenJet++) {
                GenJet *jet = new GenJet{};
                jet->setPt( fGenJetPt[iGenJet] );
                jet->setEta( fGenJetEta[iGenJet] );
                jet->setPhi( fGenJetPhi[iGenJet] );
                jet->setWTAEta( fGenJetWTAEta[iGenJet] );
                jet->setWTAPhi( fGenJetWTAPhi[iGenJet] );
                jet->setFlavor( fRefJetPartonFlavor[fGenJet2RecoJet.at(iGenJet)] );
                jet->setFlavorForB( fRefJetPartonFlavorForB[fGenJet2RecoJet.at(iGenJet)] );
                jet->setPtWeight( 1. );
                if ( fVerbose ) {
                    std::cout << Form("GenJet #%d pT: %.2f, eta: %.2f", iGenJet, fGenJetPt[iGenJet], fGenJetEta[iGenJet]) << std::endl;
                    // jet->print();
                }
                
                fEvent->genJetCollection()->push_back( jet );
            } // for (int iGenJet{0}; iGenJet<fNGenJets; iGenJet++)
            if ( fVerbose) {
                std::cout << "GenJetCollection filled" << std::endl;
            }

            // Protection from filling the collection several times
            fEvent->setGenJetCollectionIsFilled();
        } // if ( fIsMc )
        

        //
        // Loop over reconstructed jets
        //
        
        if ( fVerbose ) {
            std::cout << "nRecoJets: " << fNRecoJets << std::endl;
        }

        for (int iJet{0}; iJet<fNRecoJets; iJet++) {

            // Create a new jet instance
            RecoJet *jet = new RecoJet{};

            if ( fIsMc ) {
                // Add index of the matched GenJet
                jet->setGenJetId( fRecoJet2GenJetId.at(iJet) );
            } // if ( fIsMc )

            // Reco
            jet->setPt( fRecoJetPt[iJet] );
            jet->setEta( fRecoJetEta[iJet] );
            jet->setPhi( fRecoJetPhi[iJet] );
            jet->setWTAEta( fRecoJetWTAEta[iJet] );
            jet->setWTAPhi( fRecoJetWTAPhi[iJet] );
            jet->setRawPt( fRecoJetPt[iJet] );
            jet->setTrackMaxPt( fRecoJetTrackMax[iJet] );
            if ( fJEC ) {
                fJEC->SetJetPT( fRecoJetPt[iJet] );
                fJEC->SetJetEta( fRecoJetEta[iJet] );
                fJEC->SetJetPhi( fRecoJetPhi[iJet] );
                double pTcorr = fJEC->GetCorrectedPT();
                if ( fUseManualJEC ) {
                    // if ( fVerbose ) {
                    //     std::cout << "Default corrected pT: " << pTcorr << std::endl;
                    // }
                    pTcorr = fRecoJetPt[iJet] * jecManualCorrection( fRecoJetPt[iJet], fRecoJetEta[iJet] );
                }
                if ( fVerbose ) {
                    std::cout << "pTCorr: " << pTcorr << std::endl; 
                }
                if ( fUseExtraJECforAk4Cs ) {
                    if ( fJECScaleCorr ){
                        pTcorr *= fJECScaleCorr->Eval( pTcorr );
                    }
                    else {
                        std::cerr << "No extra correction for ak4cs exists!" << std::endl;
                    }
                }

                if ( fVerbose && fUseExtraJECforAk4Cs ) {
                    std::cout << "pTCorr after extra ak4cs correction for the jetType: " << pTcorr << std::endl; 
                }

                // To check JEC fUseJECSystematics should be outside [-1, 1] range
                if ( fIsMc && ( TMath::Abs( fUseJERSystematics ) <= 1 ) ) {
                    // pTcorr *= extraJERCorr( pTcorr, fRecoJetEta[iJet]);
                    if ( jet->hasMatching() ) {
                        pTcorr *= extraJERCorr( fEvent->genJetCollection()->at( fRecoJet2GenJetId.at(iJet) )->pt(), 
                                                fRecoJetEta[iJet]);
                    }
                }

                // JEU correction for the real data for systematic uncertainty calculation
                if ( fUseJEU !=0 && fJEU && !fIsMc ) {
                    fJEU->SetJetPT( pTcorr );
			        fJEU->SetJetEta( fRecoJetEta[iJet] );
			        fJEU->SetJetPhi( fRecoJetPhi[iJet] );
                    if ( fUseJEU > 0 ) {
                        pTcorr *= (1. + fJEU->GetUncertainty().first);
                    }
                    else {
                        pTcorr *= (1. - fJEU->GetUncertainty().second);
                    }

                    if ( fVerbose ) {
                        std::cout << "pTCorr after JEU: " << pTcorr << std::endl; 
                    }
                }
                jet->setPtJECCorr( pTcorr );
            }
            else { // If no JEC available
                if ( fVerbose ) {
                    std::cout << "No JEC available" << std::endl;
                }
                jet->setPtJECCorr( -999.f );
            }
            jet->setJtPfNHF( fRecoJtPfNHF[iJet] );
            jet->setJtPfNEF( fRecoJtPfNEF[iJet] );
            jet->setJtPfCHF( fRecoJtPfCHF[iJet] );
            jet->setJtPfMUF( fRecoJtPfMUF[iJet] );
            jet->setJtPfCEF( fRecoJtPfCEF[iJet] );
            jet->setJtPfCHM( fRecoJtPfCHM[iJet] );
            jet->setJtPfCEM( fRecoJtPfCEM[iJet] );
            jet->setJtPfNHM( fRecoJtPfNHM[iJet] );
            jet->setJtPfNEM( fRecoJtPfNEM[iJet] );
            jet->setJtPfMUM( fRecoJtPfMUM[iJet] );

            if ( fVerbose ) {
                std::cout << Form("RecoJet # %d Raw pT: %.2f Corr pT: %.2f eta: %.2f", iJet, jet->rawPt(), jet->ptJECCorr(), jet->eta()) << std::endl;
                // jet->print();
            }

            // Check fronе-loaded cut
            if ( fJetCut && !fJetCut->pass(jet) ) {
                if ( fVerbose ) {
                    std::cout << "Jet did not pass the cut" << std::endl;
                }
                delete jet;
                continue;
            }

            fEvent->recoJetCollection()->push_back( jet );
        } // for (int iJet{0}; iJet<fNRecoJets; iJet++)
    } // if ( fUseRecoJetBranch )

    if ( fEventCut && !fEventCut->pass(fEvent) ) {
        if ( fVerbose ) {
            std::cout << "Event did not pass the cut" << std::endl;
        }
        delete fEvent;
        fEvent = nullptr;
    }

    if ( fVerbose ) {
        std::cout << "ForestAODReader::returnEvent() - end\n";
    }

    return fEvent;
}